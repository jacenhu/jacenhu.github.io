(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{437:function(t,s,a){"use strict";a.r(s);var n=a(10),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"c-primer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#c-primer"}},[t._v("#")]),t._v(" C++ Primer")]),t._v(" "),s("p",[s("strong",[t._v("声明:")]),t._v("\n本文为《C++ Primer 中文版（第五版）》学习笔记。原书更为详细，本文仅作学习交流使用，未经授权禁止转载。。我已加入“维权骑士”（"),s("a",{attrs:{href:"https://link.zhihu.com/?target=http%3A//rightknights.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://rightknights.com"),s("OutboundLink")],1),t._v("）的版权保护计划，转载需授权，侵权必究。")]),t._v(" "),s("h2",{attrs:{id:"第一章-开始"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第一章-开始"}},[t._v("#")]),t._v(" 第一章 开始")]),t._v(" "),s("h3",{attrs:{id:"_1-1-编写一个简单的c-程序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-编写一个简单的c-程序"}},[t._v("#")]),t._v(" 1.1 编写一个简单的C++程序")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("每个C++程序都包含一个或多个函数，其中一个必须命名为main.")]),t._v(" "),s("h3",{attrs:{id:"_1-2-初识输入输出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-初识输入输出"}},[t._v("#")]),t._v(" 1.2 初识输入输出")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("对象")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("用途")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("cin")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("标准输入")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("cout")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("标准输出")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("cerr")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("标准错误")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("clog")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("输出运行时的一般性消息")])])])]),t._v(" "),s("h3",{attrs:{id:"_1-3-注释简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-注释简介"}},[t._v("#")]),t._v(" 1.3 注释简介")]),t._v(" "),s("p",[t._v("两种：")]),t._v(" "),s("p",[t._v("单行注释： //")]),t._v(" "),s("p",[t._v("界定符：/* 和 */")]),t._v(" "),s("h3",{attrs:{id:"_1-4-控制流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-控制流"}},[t._v("#")]),t._v(" 1.4 控制流")]),t._v(" "),s("p",[t._v("while;for;if;")]),t._v(" "),s("h2",{attrs:{id:"第二章-变量和基本类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二章-变量和基本类型"}},[t._v("#")]),t._v(" 第二章 变量和基本类型")]),t._v(" "),s("p",[t._v("P30-P71")]),t._v(" "),s("p",[t._v("数据类型是程序的基础。C++语言支持广泛的数据类型。")]),t._v(" "),s("h3",{attrs:{id:"基本内置类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本内置类型"}},[t._v("#")]),t._v(" 基本内置类型")]),t._v(" "),s("h4",{attrs:{id:"算术类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算术类型"}},[t._v("#")]),t._v(" 算术类型")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("类型")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("最小尺寸")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("bool")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("未定义")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("char")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("8位")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("w_char_t")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("16位")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("char16_t")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("16位")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("char32_t")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("32位")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("short")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("16位")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("int")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("16位")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("long")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("32位")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("long long")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("64位")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("float")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("6位有效数字")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("double")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("10位有效数字")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("long double")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("10位有效数字")])])])]),t._v(" "),s("h4",{attrs:{id:"类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型转换"}},[t._v("#")]),t._v(" 类型转换")]),t._v(" "),s("p",[t._v("不要混用符号类型和无符号类型。")]),t._v(" "),s("h3",{attrs:{id:"变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[t._v("#")]),t._v(" 变量")]),t._v(" "),s("h4",{attrs:{id:"变量定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量定义"}},[t._v("#")]),t._v(" 变量定义")]),t._v(" "),s("p",[t._v("（1）基本形式：")]),t._v(" "),s("p",[t._v("类型说明符，随后紧跟着一个或者多个变量名组成的列表，其中变量名以逗号分隔，最后以分号结束。")]),t._v(" "),s("p",[t._v("（2）初始值")]),t._v(" "),s("p",[t._v("在C++中，初始化和赋值是2个完全不同的操作。初始化的含义是创建变量的时候赋予一个初始值，而赋值的含义是把对象的当前值擦除，用一个新值来替代。两者区别很小。")]),t._v(" "),s("p",[t._v("（3）列表初始化")]),t._v(" "),s("p",[t._v("用花括号来初始化变量的方式，称为列表初始化。")]),t._v(" "),s("p",[t._v("（4）默认初始化")]),t._v(" "),s("p",[t._v("如果定义变量没有指定初始值，则变量被默认初始化。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("例外情况：")]),t._v(" "),s("p",[t._v("定义在函数体内部的内置类型变量将不被初始化，其值未定义。")]),t._v(" "),s("p",[t._v("建议初始化每个内置类型的变量。")])]),t._v(" "),s("h4",{attrs:{id:"变量声明和定义的关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量声明和定义的关系"}},[t._v("#")]),t._v(" 变量声明和定义的关系")]),t._v(" "),s("p",[t._v("变量声明：规定了变量的类型和名字。")]),t._v(" "),s("p",[t._v("变量定义：除声明之外，还需要申请存储空间。")]),t._v(" "),s("p",[t._v("如果想声明一个变量，而非定义它，需要使用extern关键词。")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extern")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 声明i而非定义i")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 声明并定义j")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("变量只能被定义一次，但可以被多次声明。")])]),t._v(" "),s("h4",{attrs:{id:"名字的作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#名字的作用域"}},[t._v("#")]),t._v(" 名字的作用域")]),t._v(" "),s("p",[t._v("作用域：C++中大多数作用域都用花括号分隔。")]),t._v(" "),s("p",[t._v("作用域中一旦声明了某个名字，它所嵌套的所有作用域都能访问该名字。同时，允许在内层作用域中重新定义外层作用域中有的名字。")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[t._v("如果函数有可能用到某全局变量，则不宜再定义一个同名的局部变量。")])]),t._v(" "),s("h3",{attrs:{id:"复合类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#复合类型"}},[t._v("#")]),t._v(" 复合类型")]),t._v(" "),s("blockquote",[s("p",[t._v("定义:\n复合类型是基于其他类型定义的类型。")])]),t._v(" "),s("h4",{attrs:{id:"引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引用"}},[t._v("#")]),t._v(" 引用")]),t._v(" "),s("p",[t._v("引用：为对象起另外一个名字。")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[t._v("引用必须被初始化。\n引用本身不是对象，所以不能定义引用的引用。\n引用要和绑定的对象严格匹配。\n引用类型的初始值，必须是一个对象。")])]),t._v(" "),s("h4",{attrs:{id:"指针"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#指针"}},[t._v("#")]),t._v(" 指针")]),t._v(" "),s("p",[t._v("指针：本身就是一个对象。允许对指针赋值和拷贝。指针无须在定义的时候赋值。")]),t._v(" "),s("p",[t._v("（1）利用指针访问对象")]),t._v(" "),s("p",[t._v("如果指针指向了一个对象，则允许使用解引用符（*）来访问该对象。")]),t._v(" "),s("p",[t._v("（2）void* 指针")]),t._v(" "),s("h4",{attrs:{id:"理解复合类型的声明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#理解复合类型的声明"}},[t._v("#")]),t._v(" 理解复合类型的声明")]),t._v(" "),s("p",[t._v("（1）指向指针的指针")]),t._v(" "),s("p",[t._v("** 表示指向指针的指针")]),t._v(" "),s("p",[t._v("*** 表示指向指针的指针的指针")]),t._v(" "),s("p",[t._v("（2）指向指针的引用")]),t._v(" "),s("p",[t._v("不能定义指向引用的指针。但指针是对象，所以存在对指针的引用。")]),t._v(" "),s("h3",{attrs:{id:"const限定符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#const限定符"}},[t._v("#")]),t._v(" const限定符")]),t._v(" "),s("p",[t._v("定义：const用于定义一个变量，它的值不能被改变。const对象必须初始化。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("默认状态下，const对象仅在文件内有效。当多个文件出现了同名的const变量时，等同于在不同文件中分别定义了独立的变量。")]),t._v(" "),s("p",[t._v("如果想让const变量在文件间共享，则使用extern修饰。")])]),t._v(" "),s("p",[t._v("（1）const的引用")]),t._v(" "),s("p",[t._v("允许为一个常量引用绑定非常量的对象、字面值，甚至是个一般表达式。")]),t._v(" "),s("p",[t._v("一般，引用的类型必须与其所引用对象的类型一致，特殊情况是表达式。")]),t._v(" "),s("p",[t._v("（2）指针和const")]),t._v(" "),s("p",[t._v("弄清楚类型，可以从右边往左边阅读。")]),t._v(" "),s("p",[t._v("（3）顶层const")]),t._v(" "),s("p",[t._v("top-level const 表示指针本身是个常量")]),t._v(" "),s("p",[t._v("low-level const表示指针所指的对象是一个常量。")]),t._v(" "),s("p",[t._v("（4）constexpr和常量表达式")]),t._v(" "),s("p",[t._v("C++新标准规定，允许将变量声明为constexpr类型以便由编译器来验证变量的值是否是一个常量表达式。")]),t._v(" "),s("h3",{attrs:{id:"处理类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#处理类型"}},[t._v("#")]),t._v(" 处理类型")]),t._v(" "),s("h4",{attrs:{id:"类型别名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型别名"}},[t._v("#")]),t._v(" 类型别名")]),t._v(" "),s("p",[t._v("两种方法用于定义类型别名：")]),t._v(" "),s("p",[t._v("（1）使用关键词typedef")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" wages"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//wages是double的同义词")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" wages "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// p是double*的同义词")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("（2）别名声明")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" SI "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Sales_item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// SI是Sales_item的同义词")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("auto类型说明符：让编译器通过初始值来推算变量的类型。")]),t._v(" "),s("p",[t._v("decltype类型指示符：选择并返回操作符的数据类型。只得到类型，不实际计算表达式的值。")]),t._v(" "),s("h3",{attrs:{id:"自定义数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自定义数据结构"}},[t._v("#")]),t._v(" 自定义数据结构")]),t._v(" "),s("p",[t._v("（1）类")]),t._v(" "),s("p",[t._v("数据结构是把一组相关的数据元素组织起来，然后使用它们的策略和方法。")]),t._v(" "),s("p",[t._v("类一般不定义在函数体内，为了确保各个文件中类的定义一致，类通常被定义在头文件中，而且类所在头文件的名字应该与类的名字一样。")]),t._v(" "),s("p",[t._v("头文件通常包含那些被定义一次的实体。")]),t._v(" "),s("p",[t._v("（2）预处理器")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("ifndef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("SALES_DATA_H")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("SALES_DATA_H")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("一般把预处理变量的名字全部大写。")]),t._v(" "),s("h3",{attrs:{id:"术语"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#术语"}},[t._v("#")]),t._v(" 术语")]),t._v(" "),s("p",[s("strong",[t._v("空指针")]),t._v(" ：值为0的指针，空指针合法但是不指向任何对象。nullPtr是表示空指针的字面值常量。")]),t._v(" "),s("p",[s("strong",[t._v("void")]),t._v("*：可以指向任意非常量的指针类型，不能执行解引用操作。")]),t._v(" "),s("h2",{attrs:{id:"第三章-字符串、向量和数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第三章-字符串、向量和数组"}},[t._v("#")]),t._v(" 第三章 字符串、向量和数组")]),t._v(" "),s("p",[t._v("P74-P118")]),t._v(" "),s("p",[t._v("string表示可变长的字符序列，vector存放的是某种给定类型对象的可变长序列。")]),t._v(" "),s("h3",{attrs:{id:"命名空间的-using-声明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#命名空间的-using-声明"}},[t._v("#")]),t._v(" 命名空间的 using 声明")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("头文件不应包含using声明。")]),t._v(" "),s("h3",{attrs:{id:"标准库类型-string"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标准库类型-string"}},[t._v("#")]),t._v(" 标准库类型 string")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("#include <string>\nusing namespace std;\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("（1）定义和初始化")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('string s1;\nsting s2(s1);\nstring s3("value");\nstring s3 = "value";\nstring s4(n, \'c\');\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("（2）string对象的操作")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("s.empty();      // 判空\ns.size();       // 字符个数\ns[n];           // s中第n个字符的引用\ns1+s2;          // s1和s2连接\n<,<=,>,>=       // 比较\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[t._v("标准局允许把字面值和字符串字面值转换成string对象。字面值和string是不同的类型。")])]),t._v(" "),s("p",[t._v("(3)处理string对象中的字符")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("C++程序的头文件应该使用cname，而不应该使用name.h的形式")])]),t._v(" "),s("p",[t._v("遍历给定序列中的每个值执行某种操作")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("declaration "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" expression"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    statement\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("h3",{attrs:{id:"标准库类型-vector"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标准库类型-vector"}},[t._v("#")]),t._v(" 标准库类型 vector")]),t._v(" "),s("p",[t._v("标准库vector表示对象的集合，其中所有对象的类型都相同。")]),t._v(" "),s("p",[t._v("vector是一个类模板，而不是类型。")]),t._v(" "),s("p",[t._v("（1）定义和初始化vector对象")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("vector"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" v1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nvector"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("v2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nvector"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" v2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nvector"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("v3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nvector"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("v4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nvector"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" v5"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nvecrot"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" v5"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[t._v("如果用圆括号，那么提供的值是用来构造vector对象的。")]),t._v(" "),s("p",[t._v("如果用花括号，则是使用列表初始化该vector对象。")]),t._v(" "),s("p",[t._v("（2）向vector对象添加元素")]),t._v(" "),s("p",[t._v("先定义一个空的vector对象，在运行的时候使用push_back向其中添加具体指。")]),t._v(" "),s("p",[t._v("（3）其他vector操作")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("empty")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push_back")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[t._v("只能对确认已存在的元素执行下标操作。")])]),t._v(" "),s("h3",{attrs:{id:"迭代器介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#迭代器介绍"}},[t._v("#")]),t._v(" 迭代器介绍")]),t._v(" "),s("p",[t._v("迭代器运算符")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("iter            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解引用，返回引用")]),t._v("\niter"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("mem        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等价于  (*iter).mem")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("iter\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("iter\niter1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" iter2\niter1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" iter2\niter "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" n\niter "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" n\niter "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" n\niter "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v(" n\niter1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" iter2     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 两个迭代器相减的结果是它们之间的距离")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 位置比较")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br")])]),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[t._v("凡是使用了迭代器的循环体，都不能向迭代器所属的容器添加元素。")])]),t._v(" "),s("h3",{attrs:{id:"数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[t._v("#")]),t._v(" 数组")]),t._v(" "),s("p",[t._v("（1）数组、指针")]),t._v(" "),s("p",[t._v("使用数组下标的时候，通常将其定义为size_t类型。")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[t._v("定义数组必须指定数组的类型，不允许用auto推断。")]),t._v(" "),s("p",[t._v("不存在引用的数组。")]),t._v(" "),s("p",[t._v("如果两个指针分别指向不相关的对象，则不能进行对这2个指针进行比较。")])]),t._v(" "),s("h3",{attrs:{id:"多维数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多维数组"}},[t._v("#")]),t._v(" 多维数组")]),t._v(" "),s("p",[t._v("多维数组实际上是数组的数组。")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("size_t cnt = 0;\nfor(auto &row : a)\n\tfor (auto &col : row){\n\t\tcol = cnt;\n\t\t++cnt;\n\t}\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ip"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 整型指针的数组")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ip"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向含有4个整数的数组")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("h3",{attrs:{id:"术语-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#术语-2"}},[t._v("#")]),t._v(" 术语")]),t._v(" "),s("p",[s("strong",[t._v("begin")]),t._v(" string和vector的成员，返回指向第一个元素的迭代器。也是一个标准库函数，输入一个数组，返回指向该数组首元素的指针。")]),t._v(" "),s("p",[s("strong",[t._v("end")]),t._v(" string和vector的成员，返回一个尾后迭代器。也是一个标准库函数，输入一个数组，返回指向该数组尾元素的下一个位置的指针。")]),t._v(" "),s("h2",{attrs:{id:"第四章-表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第四章-表达式"}},[t._v("#")]),t._v(" 第四章 表达式")]),t._v(" "),s("p",[t._v("P120-P151")]),t._v(" "),s("h3",{attrs:{id:"_4-1-基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-基础"}},[t._v("#")]),t._v(" 4.1 基础")]),t._v(" "),s("p",[s("strong",[t._v("重载运算符")]),t._v("：为已经存在的运算符赋予了另外一层含义。")]),t._v(" "),s("p",[s("strong",[t._v("左值、右值")]),t._v("：")]),t._v(" "),s("p",[t._v("当一个对象用作右值得时候，用的是对象的值（内容）。")]),t._v(" "),s("p",[t._v("当对象被用作左值得时候，用的是对象的身份（在内存中的位置）。")]),t._v(" "),s("h3",{attrs:{id:"_4-2-算术运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-算术运算符"}},[t._v("#")]),t._v(" 4.2 算术运算符")]),t._v(" "),s("p",[s("strong",[t._v("%")]),t._v("：参与取余运算的运算对象必须是整数类型。")]),t._v(" "),s("h3",{attrs:{id:"_4-3-逻辑和关系运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-逻辑和关系运算符"}},[t._v("#")]),t._v(" 4.3 逻辑和关系运算符")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("运算符")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("!")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("<")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("<=")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v(">")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v(">=")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("==")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("!=")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("&&")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("||")])])])]),t._v(" "),s("p",[t._v("&& 运算符和 || 运算符都是先求左侧运算对象的值再求右侧运算对象的值。")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[t._v("进行比较运算的时候，除非比较的对象是bool类型，否则不要使用布尔字面值true,false作为运算对象。")])]),t._v(" "),s("h3",{attrs:{id:"_4-4-赋值运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-赋值运算符"}},[t._v("#")]),t._v(" 4.4 赋值运算符")]),t._v(" "),s("p",[t._v("赋值运算符满足右结合律。")]),t._v(" "),s("p",[t._v("不要混淆相等运算符和赋值运算符")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h3",{attrs:{id:"_4-5-递增和递减运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-递增和递减运算符"}},[t._v("#")]),t._v(" 4.5 递增和递减运算符")]),t._v(" "),s("p",[t._v("递增运算符 ++")]),t._v(" "),s("p",[t._v("递减运算符 --")]),t._v(" "),s("h3",{attrs:{id:"_4-6-成员访问运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-6-成员访问运算符"}},[t._v("#")]),t._v(" 4.6 成员访问运算符")]),t._v(" "),s("p",[t._v("点运算符和箭头运算符")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nn "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("h3",{attrs:{id:"_4-7-条件运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-7-条件运算符"}},[t._v("#")]),t._v(" 4.7 条件运算符")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("condition "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" expression1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" expression2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h3",{attrs:{id:"_4-8-位运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-8-位运算符"}},[t._v("#")]),t._v(" 4.8 位运算符")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("运算符")]),t._v(" "),s("th",[t._v("功能")]),t._v(" "),s("th",[t._v("用法")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("备注")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("~")]),t._v(" "),s("td",[t._v("位求反")]),t._v(" "),s("td",[t._v("~expr")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("1置为0，0置为1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("<<")]),t._v(" "),s("td",[t._v("左移")]),t._v(" "),s("td",[t._v("expr << expr2")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("在右侧插入值位0的二进制位")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v(">>")]),t._v(" "),s("td",[t._v("右移")]),t._v(" "),s("td",[t._v("expr1 >> expr2")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("&")]),t._v(" "),s("td",[t._v("位与")]),t._v(" "),s("td",[t._v("expr1 & expr2")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("对应位置都是1，则结果1，否则为0。")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("^")]),t._v(" "),s("td",[t._v("位异或")]),t._v(" "),s("td",[t._v("expr1 ^ expr2")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("对应位置有且只有1个为1，则结果是1，否则为0。")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("|")]),t._v(" "),s("td",[t._v("位或")]),t._v(" "),s("td",[t._v("expr1 | expr2")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("对应位置至少有1个位1，则结果是1，否则为0。")])])])]),t._v(" "),s("h3",{attrs:{id:"_4-9-sizeof运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-9-sizeof运算符"}},[t._v("#")]),t._v(" 4.9 sizeof运算符")]),t._v(" "),s("p",[t._v("sizeof运算符返回一条表达式或一个类型名字所占的字节数，其所得值是一个size_t类型，是一个常量表达式。")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),t._v(" expr\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("h3",{attrs:{id:"_4-10-逗号运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-10-逗号运算符"}},[t._v("#")]),t._v(" 4.10 逗号运算符")]),t._v(" "),s("p",[t._v("逗号运算符含有两个运算对象，按照从左向右的顺序依次求值。")]),t._v(" "),s("h3",{attrs:{id:"_4-11-类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-11-类型转换"}},[t._v("#")]),t._v(" 4.11 类型转换")]),t._v(" "),s("p",[s("strong",[t._v("隐式转换")])]),t._v(" "),s("p",[s("strong",[t._v("显式转换")])]),t._v(" "),s("p",[t._v("命名的强制类型转换")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("cast"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token generic-function"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token generic class-name"}},[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expression"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// cast-name是static_cast,dynamic_cast,const_cast,reinterpret_cast")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("由于强制类型转换干扰了正常的类型检查，因此建议避免强制类型转换。")])]),t._v(" "),s("h3",{attrs:{id:"_4-12-运算符优先级表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-12-运算符优先级表"}},[t._v("#")]),t._v(" 4.12 运算符优先级表")]),t._v(" "),s("h2",{attrs:{id:"第五章-语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第五章-语句"}},[t._v("#")]),t._v(" 第五章 语句")]),t._v(" "),s("p",[t._v("P154-P178")]),t._v(" "),s("h3",{attrs:{id:"_5-1-简单语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-简单语句"}},[t._v("#")]),t._v(" 5.1 简单语句")]),t._v(" "),s("p",[t._v("（1）空语句")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 空语句")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("（2）复合语句")]),t._v(" "),s("p",[t._v("复合语句是指用花括号括起来的（可能为空的）语句和声明的序列，复合语句也被称作块（block）。")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h3",{attrs:{id:"_5-2-语句作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-语句作用域"}},[t._v("#")]),t._v(" 5.2 语句作用域")]),t._v(" "),s("p",[t._v("定义在控制结构当中的变量只在相应语句的内部可见，一旦语句结束，变量就超出其作用范围。")]),t._v(" "),s("h3",{attrs:{id:"_5-3-条件语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-条件语句"}},[t._v("#")]),t._v(" 5.3 条件语句")]),t._v(" "),s("p",[t._v("（1）if 语句")]),t._v(" "),s("p",[t._v("（2）switch 语句")]),t._v(" "),s("p",[t._v("case关键字和它对应的值一起被称为case标签。")]),t._v(" "),s("p",[t._v("case标签必须是整形常量表达式。")]),t._v(" "),s("p",[t._v("如果某个case标签匹配成功，将从该标签开始往后顺序执行所有case分支，除非程序显示的中断了这一过程。")]),t._v(" "),s("p",[t._v("dedault 标签：如果没有任何一个case标签能匹配上switch表达式的值，程序将执行紧跟在default标签后面的语句。")]),t._v(" "),s("h3",{attrs:{id:"_5-4-迭代语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-迭代语句"}},[t._v("#")]),t._v(" 5.4 迭代语句")]),t._v(" "),s("p",[t._v("（1）while 语句")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("while (condition)\n\t\t\tstatement\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("（2）传统 for 语句")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("initializar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" condition"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" expression"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\tstatement\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("for 语句中定义的对象只在for循环体内可见。")]),t._v(" "),s("p",[t._v("（3）范围 for 语句")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("declaration "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" expression"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\tstatement\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("（4）do while 语句")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" \n\tstatement\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("condition"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h3",{attrs:{id:"_5-5-跳转语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-跳转语句"}},[t._v("#")]),t._v(" 5.5 跳转语句")]),t._v(" "),s("p",[s("strong",[t._v("break")])]),t._v(" "),s("p",[t._v("break只能出现在迭代语句或者switch语句内部。仅限于终止离它最近的语句，然后从这些语句之后的第一条语句开始执行。")]),t._v(" "),s("p",[s("strong",[t._v("continue")])]),t._v(" "),s("p",[t._v("continue语句终止最近的循环中的当前迭代并立即开始下一次迭代。")]),t._v(" "),s("p",[s("strong",[t._v("goto")])]),t._v(" "),s("p",[t._v("goto的作用是从goto语句无条件跳转到同一函数内的另一条语句。")]),t._v(" "),s("p",[t._v("容易造成控制流混乱，应禁止使用。")]),t._v(" "),s("p",[s("strong",[t._v("return")])]),t._v(" "),s("h3",{attrs:{id:"_5-6-try语句块和异常处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-6-try语句块和异常处理"}},[t._v("#")]),t._v(" 5.6 try语句块和异常处理")]),t._v(" "),s("p",[t._v("C++中异常处理包括：throw表达式、try语句块。")]),t._v(" "),s("p",[t._v("try和catch，将一段可能抛出异常的语句序列括在花括号里构成try语句块。catch子句负责处理代码抛出的异常。")]),t._v(" "),s("p",[t._v("throw表达式语句，终止函数的执行。抛出一个异常，并把控制权转移到能处理该异常的最近的catch字句。")]),t._v(" "),s("h2",{attrs:{id:"第六章-函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第六章-函数"}},[t._v("#")]),t._v(" 第六章 函数")]),t._v(" "),s("p",[t._v("P182-P225")]),t._v(" "),s("h3",{attrs:{id:"_6-1-函数基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-函数基础"}},[t._v("#")]),t._v(" 6.1 函数基础")]),t._v(" "),s("p",[t._v("（1）形参和实参：")]),t._v(" "),s("p",[t._v("实参的类型必须与对应的形参类型匹配。")]),t._v(" "),s("p",[t._v("函数的调用规定实参数量应与形参数量一致。")]),t._v(" "),s("p",[t._v("（2）局部对象")]),t._v(" "),s("p",[t._v("形参和参数体内部定义的变量统称为"),s("strong",[t._v("局部变量")]),t._v('，它们对函数而言是"局部"的，仅在函数的作用域内可见，同时局部变量还会隐藏外层作用域中同名的其他变量。')]),t._v(" "),s("p",[s("strong",[t._v("自动对象")]),t._v("：只存在于块执行期间的对象。")]),t._v(" "),s("p",[t._v("局部静态对象：在程序的执行路径第一次经过对象定义语句时候进行初始化，并且直到程序终止才会被销毁。")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("size_t "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("count_calls")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" size_t ctr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("ctr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("（3）函数声明")]),t._v(" "),s("p",[t._v("函数的三要素：（返回类型、函数名、形参类型）。")]),t._v(" "),s("p",[t._v("函数可被声明多次，但只能被定义一次。")]),t._v(" "),s("p",[t._v("（4）分离式编译")]),t._v(" "),s("p",[t._v("分离式编译允许把程序分割到几个文件中去，每个文件独立编译。")]),t._v(" "),s("p",[t._v("编译->链接")]),t._v(" "),s("h3",{attrs:{id:"_6-2-参数传递"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-参数传递"}},[t._v("#")]),t._v(" 6.2 参数传递")]),t._v(" "),s("p",[t._v("当形参是引用类型，这时它对应的实参被引用传递或者函数被传引用调用。")]),t._v(" "),s("p",[t._v("当实参被拷贝给形参，这样的实参被值传递或者函数被传值调用。")]),t._v(" "),s("p",[t._v("（1）传值参数")]),t._v(" "),s("p",[t._v("（2）被引用传参")]),t._v(" "),s("p",[t._v("（3）const形参和实参")]),t._v(" "),s("p",[t._v("（4）数组形参")]),t._v(" "),s("p",[t._v("为函数传递一个数组时，实际上传递的是指向数组首元素的指针。")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pring")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 以上三个函数等价")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("数组引用实参： f(int (&arr)[10])")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("matrix"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 10个指针构成的数组")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("matrix"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向含有10个整数的数组的指针")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("（5）含有可变形参的数组")]),t._v(" "),s("p",[t._v("initializer_list")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("err_msg")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("initializer_list"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" li"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h3",{attrs:{id:"_6-3-返回类型和return语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-返回类型和return语句"}},[t._v("#")]),t._v(" 6.3 返回类型和return语句")]),t._v(" "),s("p",[t._v("2种：无返回值函数和右返回值函数。")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" expression"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("函数完成后，它所占用的存储空间也会随着被释放掉。")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[t._v("返回局部对象的引用是错误的；返回局部对象的指针也是错误的。")])]),t._v(" "),s("h3",{attrs:{id:"_6-4-函数重载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-函数重载"}},[t._v("#")]),t._v(" 6.4 函数重载")]),t._v(" "),s("p",[t._v("重载函数：同一作用域内的几个函数名字相同但形参列表不通，我们称之为重载函数。（overloaded）。")]),t._v(" "),s("p",[t._v("不允许2个函数除了返回类型外其他所有的要素都相同。")]),t._v(" "),s("p",[s("strong",[t._v("重载与作用域")])]),t._v(" "),s("p",[t._v("如果在内存作用域中声明名字，它将隐藏外层作用域中声明的同名实体。")]),t._v(" "),s("h3",{attrs:{id:"_6-5-特殊用途语言特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-5-特殊用途语言特性"}},[t._v("#")]),t._v(" 6.5 特殊用途语言特性")]),t._v(" "),s("p",[t._v("（1）默认实参")]),t._v(" "),s("p",[t._v("函数调用时，实参按其位置解析，默认实参负责填补函数调用缺少的尾部实参。")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" string"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("size_type sz"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstring "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("screen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sz ht "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("24")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sz wid "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" background "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("' '")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("当设计含有默认实参的函数时，需要合理设置形参的顺序。一旦某个形参被赋予了默认值，它后面的所有形参都必须有默认值。")])]),t._v(" "),s("p",[t._v("（2）内联函数")]),t._v(" "),s("p",[t._v("使用关键词inline来声明内联函数。")]),t._v(" "),s("p",[t._v("内联用于优化规模较小，流程直接，频繁调用的函数。")]),t._v(" "),s("p",[t._v("（3）constexpr函数")]),t._v(" "),s("p",[t._v("constexpr函数是指能用于常量表达式的函数。")]),t._v(" "),s("h3",{attrs:{id:"_6-6-函数匹配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-6-函数匹配"}},[t._v("#")]),t._v(" 6.6 函数匹配")]),t._v(" "),s("p",[t._v("Step1:确定候选函数和可选函数。")]),t._v(" "),s("p",[t._v("Step2:寻找最佳匹配。")]),t._v(" "),s("h3",{attrs:{id:"_6-7-函数指针"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-7-函数指针"}},[t._v("#")]),t._v(" 6.7 函数指针")]),t._v(" "),s("p",[t._v("函数指针指向的是函数而非对象。")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("useBigger")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" string "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("s1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" string "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("s2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" string "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" string "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n等价于\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("useBigger")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" string "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("s1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" string "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("s2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" string "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" string "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h2",{attrs:{id:"第七章-类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第七章-类"}},[t._v("#")]),t._v(" 第七章 类")]),t._v(" "),s("p",[t._v("P228-P273")]),t._v(" "),s("p",[t._v("类的基本思想是数据抽象和封装。")]),t._v(" "),s("p",[t._v("抽象是一种依赖于接口和实现分离的编程技术。")]),t._v(" "),s("p",[t._v("封装实现了类的接口和实现的分离。")]),t._v(" "),s("h3",{attrs:{id:"_7-1-定义抽象数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-定义抽象数据类型"}},[t._v("#")]),t._v(" 7.1 定义抽象数据类型")]),t._v(" "),s("p",[t._v("（1）this")]),t._v(" "),s("p",[t._v("任何对类成员的直接访问都被看作this的隐式引用。")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("string "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isbn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" bookNo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("等价于")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("string "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isbn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("bookNo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("（2）在类的外部定义成员函数")]),t._v(" "),s("p",[t._v("类外部定义的成员的名字必须包含它所属的类名。")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Sales_data")]),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("avg_price")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("units_sol"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" revenue"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("units_sols"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("（3）构造函数")]),t._v(" "),s("blockquote",[s("p",[t._v("定义：类通过一个或几个特殊的成员函数来控制其对象的初始化过程，这些函数叫做构造函数。")]),t._v(" "),s("p",[t._v("构造函数没有返回类型；")]),t._v(" "),s("p",[t._v("构造函数的名字和类名相同。")])]),t._v(" "),s("p",[t._v("类通过一个特殊的构造函数来控制默认初始化过程，这个函数叫做"),s("strong",[t._v("默认构造函数")]),t._v("。")]),t._v(" "),s("p",[t._v("编译器创建的构造函数被称为"),s("strong",[t._v("合成的默认构造函数")]),t._v("。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("只有当类没有声明任何构造函数的时，编译器才会自动的生成默认构造函数。")]),t._v(" "),s("p",[t._v("一旦我们定义了一些其他的构造函数，除非我们再定义一个默认的构造函数，否则类将没有默认构造函数")])]),t._v(" "),s("h3",{attrs:{id:"_7-2-访问控制与封装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-访问控制与封装"}},[t._v("#")]),t._v(" 7.2 访问控制与封装")]),t._v(" "),s("p",[t._v("（1）访问控制")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("说明符")]),t._v(" "),s("th",[t._v("用途")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("public")]),t._v(" "),s("td",[t._v("使用public定义的成员，在整个程序内可被访问，public成员定义类的接口。")])]),t._v(" "),s("tr",[s("td",[t._v("private")]),t._v(" "),s("td",[t._v("使用private定义的成员可以被类的成员函数访问，但是不能被使用该类的代码访问，private部分封装了类的实现细节。")])])])]),t._v(" "),s("p",[t._v("（2）友元")]),t._v(" "),s("p",[t._v("类可以允许其他类或者函数访问它的非公有成员，方法是令其他类或者函数成为它的友元。")]),t._v(" "),s("p",[t._v("以friend关键字标识。")]),t._v(" "),s("p",[t._v("友元不是类的成员，不受访问控制级别的约束。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("友元的声明仅仅制定了访问的权限，而非通常意义的函数声明。必须在友元之外再专门对函数进行一次声明。")])]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Sales_data.h")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Sales_data")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("friend")]),t._v(" Sales_data "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Sales_data"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Sales_data"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("friend")]),t._v(" std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("ostream "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("ostream"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Sales_data"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("friend")]),t._v(" std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("istream "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("istream"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Sales_data"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// nonmember Sales_data interface functions")]),t._v("\nSales_data "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Sales_data"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Sales_data"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstd"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("ostream "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("ostream"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Sales_data"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstd"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("istream "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("istream"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Sales_data"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Sales_data.cpp")]),t._v("\n\nSales_data \n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Sales_data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("lhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Sales_data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tSales_data sum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" lhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// copy data members from lhs into sum")]),t._v("\n\tsum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("combine")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// add data members from rhs into sum")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" sum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// transactions contain ISBN, number of copies sold, and sales price")]),t._v("\nistream"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("istream "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("is"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Sales_data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" price "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tis "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bookNo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("units_sold "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" price"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\titem"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("revenue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" price "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("units_sold"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" is"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nostream"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ostream "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("os"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Sales_data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tos "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isbn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("units_sold "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),t._v(" \n\t   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("revenue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("avg_price")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" os"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br"),s("span",{staticClass:"line-number"},[t._v("39")]),s("br"),s("span",{staticClass:"line-number"},[t._v("40")]),s("br"),s("span",{staticClass:"line-number"},[t._v("41")]),s("br")])]),s("h3",{attrs:{id:"_7-3-类的其他特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-类的其他特性"}},[t._v("#")]),t._v(" 7.3 类的其他特性")]),t._v(" "),s("p",[t._v("（1）重载成员变量")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("Screen myScrren"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" ch "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" myScreen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nch "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" myScreen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("（2）类数据成员的初始化")]),t._v(" "),s("p",[t._v("类内初始值必须使用=或者{}的初始化形式。")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Window_mgr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("vector"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Screen"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" screens"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Screen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("24")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("' '")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("（3）基于const的重载")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Screen")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// display overloaded on whether the object is const or not")]),t._v("\n    Screen "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("display")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("ostream "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("os"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n                  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("do_display")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("os"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Screen "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("display")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("ostream "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("os"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\n                  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("do_display")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("os"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[t._v("当某个对象调用display的时候，该对象是否是const决定了应该调用display的哪个版本。")]),t._v(" "),s("p",[t._v("（3）类类型")]),t._v(" "),s("p",[t._v("对于一个类来说，在我们创建他的对象之前该类必须被定义过，而不能仅被声明。")]),t._v(" "),s("p",[t._v("（4）友元")]),t._v(" "),s("p",[s("em",[t._v("友元类")])]),t._v(" "),s("p",[t._v("如果一个类指定了友元类，则友元类的成员函数可以访问此类包括非公有成员在内的所有成员。")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Screen")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Window_mgr的成员可以访问Screen类的私有部分")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("friend")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Window_mgr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[s("em",[t._v("令成员函数作为友元")])]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Screen {\n\t// Window_mgr::clear必须在Screen类之前被声明\n\tfriend void Window_mgr::clear(ScreenIndex);\n}\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("h3",{attrs:{id:"_7-4-类的作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-类的作用域"}},[t._v("#")]),t._v(" 7.4 类的作用域")]),t._v(" "),s("p",[t._v("一个类就是一个作用域。")]),t._v(" "),s("h3",{attrs:{id:"_7-5-构造函数再探"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-5-构造函数再探"}},[t._v("#")]),t._v(" 7.5 构造函数再探")]),t._v(" "),s("p",[t._v("（1）构造函数的初始值有时必不可少")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("如果成员是const、引用，或者属于某种未提供默认构造函数的类类型化。我们必须通过构造函数初始值列表为这些成员提供初值。")])]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConstRef")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ConstRef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ci"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("ri"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nConstRef"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ConstRef")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ii"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("i")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ii"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ci")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ii"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ri")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("p",[t._v("（2）成员初始化的顺序")]),t._v(" "),s("p",[t._v("成员初始化的顺序与它们在类定义中出现 的顺序一致。P259")]),t._v(" "),s("p",[t._v("（3）委托构造函数")]),t._v(" "),s("p",[t._v("使用它所述类的其他构造函数执行它自己的初始化过程。")]),t._v(" "),s("p",[t._v("（4）如果去抑制构造函数定义的隐式转换？")]),t._v(" "),s("p",[t._v("在类内声明构造函数的时候使用explicit关键字。")]),t._v(" "),s("h3",{attrs:{id:"_7-6-类的静态成员"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-6-类的静态成员"}},[t._v("#")]),t._v(" 7.6 类的静态成员")]),t._v(" "),s("p",[t._v("（1）声明静态成员")]),t._v(" "),s("p",[t._v("在成员的声明之前加上关键词static。")]),t._v(" "),s("p",[t._v("类的静态成员存在于任何对象之外，对象中不包含任何与静态成员有关的数据。")]),t._v(" "),s("p",[t._v("（2）使用类的静态成员")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Account")]),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("h3",{attrs:{id:"小结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),s("p",[t._v("类有两项基本能力：")]),t._v(" "),s("p",[t._v("一是数据数据抽象，即定义数据成员和函数成员的能力；")]),t._v(" "),s("p",[t._v("二是封装，即保护类的成员不被随意访问的能力。")]),t._v(" "),s("h2",{attrs:{id:"第八章-io库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第八章-io库"}},[t._v("#")]),t._v(" 第八章 IO库")]),t._v(" "),s("p",[t._v("P278-P290")]),t._v(" "),s("p",[t._v("C++语言不直接处理输入输出，而是通过一组定义在标准库中的类型来处理IO。")]),t._v(" "),s("ul",[s("li",[t._v("iostream处理控制台IO")]),t._v(" "),s("li",[t._v("fstream处理命名文件IO")]),t._v(" "),s("li",[t._v("stringstream完成内存string的IO")])]),t._v(" "),s("p",[t._v("ifstream和istringstream继承自istream")]),t._v(" "),s("p",[t._v("ofstream和ostringstream继承自ostream")]),t._v(" "),s("h3",{attrs:{id:"_8-1-io类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-io类"}},[t._v("#")]),t._v(" 8.1 IO类")]),t._v(" "),s("p",[t._v("（1）IO对象无拷贝或复制。")]),t._v(" "),s("p",[t._v("进行IO操作的函数通常以引用方式传递和返回流。")]),t._v(" "),s("p",[t._v("（2）刷新输出缓冲区")]),t._v(" "),s("p",[t._v("flush刷新缓冲区，但不输出任何额外的字符；")]),t._v(" "),s("p",[t._v("ends向缓冲区插入一个空字符，然后刷新缓冲区。")]),t._v(" "),s("h3",{attrs:{id:"_8-2-文件输入输出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-文件输入输出"}},[t._v("#")]),t._v(" 8.2 文件输入输出")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("类")]),t._v(" "),s("th",[t._v("作用")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("ifstream")]),t._v(" "),s("td",[t._v("从一个给定文件读取数据")])]),t._v(" "),s("tr",[s("td",[t._v("ofstream")]),t._v(" "),s("td",[t._v("从一个给定文件写入数据")])]),t._v(" "),s("tr",[s("td",[t._v("fstream")]),t._v(" "),s("td",[t._v("读写给定文件")])])])]),t._v(" "),s("h3",{attrs:{id:"_8-3-string流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-3-string流"}},[t._v("#")]),t._v(" 8.3 string流")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("类")]),t._v(" "),s("th",[t._v("作用")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("istringstream")]),t._v(" "),s("td",[t._v("从string读取数据")])]),t._v(" "),s("tr",[s("td",[t._v("ostringstream")]),t._v(" "),s("td",[t._v("向string写入数据")])]),t._v(" "),s("tr",[s("td",[t._v("stringstream")]),t._v(" "),s("td",[t._v("既可从string读数据也可以向string写数据")])])])]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// will hold a line and word from input, respectively")]),t._v("\n\tstring line"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" word"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// will hold all the records from the input")]),t._v("\n\tvector"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("PersonInfo"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" people"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// read the input a line at a time until end-of-file (or other error)")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getline")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("is"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" line"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("       \n\t\tPersonInfo info"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// object to hold this record's data")]),t._v("\n\t    istringstream "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("record")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("line"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bind record to the line we just read")]),t._v("\n\t\trecord "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" info"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// read the name")]),t._v("\n\t    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("record "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" word"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// read the phone numbers ")]),t._v("\n\t\t\tinfo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("phones"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push_back")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("word"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// and store them")]),t._v("\n\t\tpeople"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push_back")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("info"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// append this record to people")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br")])]),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// for each entry in people")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vector"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("PersonInfo"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("const_iterator entry "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" people"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("begin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t\tentry "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" people"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("entry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("    \n\t\tostringstream formatted"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" badNums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// objects created on each loop")]),t._v("\n\n\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// for each number")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vector"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("const_iterator nums "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" entry"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("phones"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("begin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t\tnums "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" entry"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("phones"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n\t\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("valid")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("           \n\t\t\t\tbadNums "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// string in badNums")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("                        \n\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ``writes'' to formatted's string")]),t._v("\n\t\t\t\tformatted "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("format")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("badNums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("empty")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// there were no bad numbers")]),t._v("\n\t\t\tos "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" entry"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// print the name ")]),t._v("\n\t\t\t   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" formatted"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// and reformatted numbers ")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("                   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// otherwise, print the name and bad numbers")]),t._v("\n\t\t\tcerr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"input error: "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" entry"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("name \n\t\t\t     "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('" invalid number(s) "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" badNums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br")])]),s("h2",{attrs:{id:"第九章-顺序容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第九章-顺序容器"}},[t._v("#")]),t._v(" 第九章 顺序容器")]),t._v(" "),s("p",[t._v("P292-P332")]),t._v(" "),s("p",[t._v("顺序容器为程序员提供了控制元素存储和访问顺序的能力。")]),t._v(" "),s("h3",{attrs:{id:"_9-1-顺序容器概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-1-顺序容器概述"}},[t._v("#")]),t._v(" 9.1 顺序容器概述")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("类型")]),t._v(" "),s("th",[t._v("作用")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("vector")]),t._v(" "),s("td",[t._v("可变数组大小。支持快速随机访问。在尾部之外的位置插入或删除元素可能很慢。")])]),t._v(" "),s("tr",[s("td",[t._v("deque")]),t._v(" "),s("td",[t._v("双端队列。支持快速随机访问。在头尾位置插入/删除速度很快。")])]),t._v(" "),s("tr",[s("td",[t._v("list")]),t._v(" "),s("td",[t._v("双向链表。只支持双向顺序访问。在list中任何位置进行插入/删除操作速度都很快。")])]),t._v(" "),s("tr",[s("td",[t._v("forward_list")]),t._v(" "),s("td",[t._v("单向链表。只支持单向顺序访问。在链表任何位置进行插入/删除操作速度都很快。")])]),t._v(" "),s("tr",[s("td",[t._v("array")]),t._v(" "),s("td",[t._v("固定大小数组。支持快速随机访问。不能添加或删除元素。")])]),t._v(" "),s("tr",[s("td",[t._v("string")]),t._v(" "),s("td",[t._v("与vector相似的容器，但专门用于保存字符、随机访问快。在尾部插入/删除速度快。")])])])]),t._v(" "),s("h3",{attrs:{id:"_9-2-容器库概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-2-容器库概述"}},[t._v("#")]),t._v(" 9.2 容器库概述")]),t._v(" "),s("p",[t._v("一般，每个容器都定义在一个头文件中。")]),t._v(" "),s("p",[t._v("容器均定义为模板类。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("类型别名")]),t._v(" "),s("th")])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("iterator")]),t._v(" "),s("td",[t._v("此容器类型的迭代器类型")])]),t._v(" "),s("tr",[s("td",[t._v("const_iterator")]),t._v(" "),s("td",[t._v("可以读取元素，但不能修改元素的迭代器类型")])]),t._v(" "),s("tr",[s("td",[t._v("size_type")]),t._v(" "),s("td",[t._v("无符号整数类型，足够保存此种容器类型最大可能容器的大小")])]),t._v(" "),s("tr",[s("td",[t._v("difference_type")]),t._v(" "),s("td",[t._v("带符号整数类型，足够保存两个迭代器之间的距离")])]),t._v(" "),s("tr",[s("td",[t._v("value_type")]),t._v(" "),s("td",[t._v("元素类型")])]),t._v(" "),s("tr",[s("td",[t._v("reference")]),t._v(" "),s("td",[t._v("元素的左值诶性：与value_type&含义相同")])]),t._v(" "),s("tr",[s("td",[t._v("const_reference")]),t._v(" "),s("td",[t._v("元素的const左值类型（即，const value_type&）")])])])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("构造函数")]),t._v(" "),s("th")])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("C c;")]),t._v(" "),s("td",[t._v("默认构造函数，构造空容器")])]),t._v(" "),s("tr",[s("td",[t._v("C c1(c2)")]),t._v(" "),s("td",[t._v("构造c2的拷贝c1")])]),t._v(" "),s("tr",[s("td",[t._v("C c(b, e)")]),t._v(" "),s("td",[t._v("构造c，将迭代器b和e指定的范围内的元素拷贝到c（array不支持）")])]),t._v(" "),s("tr",[s("td",[t._v("C c{a, b, c...}")]),t._v(" "),s("td",[t._v("列表初始化c")])])])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("赋值与swap")]),t._v(" "),s("th")])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("c1=c2")]),t._v(" "),s("td",[t._v("将c1中的元素替换为c2中元素")])]),t._v(" "),s("tr",[s("td",[t._v("c1 = {a, b, c...}")]),t._v(" "),s("td",[t._v("将c1中的元素替换为列表中元素（不适用于array）")])]),t._v(" "),s("tr",[s("td",[t._v("a.swap(b)")]),t._v(" "),s("td",[t._v("交换a和b的元素")])]),t._v(" "),s("tr",[s("td",[t._v("swap(a, b)")]),t._v(" "),s("td",[t._v("与a.swap(b)等价")])])])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("大小")]),t._v(" "),s("th")])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("c.size()")]),t._v(" "),s("td",[t._v("c中元素的数组（不支持forward_list）")])]),t._v(" "),s("tr",[s("td",[t._v("c.max_size()")]),t._v(" "),s("td",[t._v("c中可保存的最大元素数目")])]),t._v(" "),s("tr",[s("td",[t._v("c.empty()")]),t._v(" "),s("td",[t._v("若c中存储了元素，返回false,否则返回true")])])])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("添加/删除元素（不适用于array）")]),t._v(" "),s("th")])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("c.insert(args)")]),t._v(" "),s("td",[t._v("将args中的元素拷贝进c")])]),t._v(" "),s("tr",[s("td",[t._v("c.emplace(inits)")]),t._v(" "),s("td",[t._v("使用inits构造c中的一个元素")])]),t._v(" "),s("tr",[s("td",[t._v("c.erase(args)")]),t._v(" "),s("td",[t._v("删除args指定的元素")])]),t._v(" "),s("tr",[s("td",[t._v("c.clear()")]),t._v(" "),s("td",[t._v("删除c中的所有元素，返回void")])])])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("关系运算符")]),t._v(" "),s("th")])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("==, !=")]),t._v(" "),s("td",[t._v("所有容器都支持相等(不等运算符)")])]),t._v(" "),s("tr",[s("td",[t._v("<,<=,>,>=")]),t._v(" "),s("td",[t._v("关系运算符(无序关联容器不支持）")])])])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("获取迭代器")]),t._v(" "),s("th")])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("c.begin(), c.end()")]),t._v(" "),s("td",[t._v("返回指向c的首元素和尾元素之后位置的迭代器")])]),t._v(" "),s("tr",[s("td",[t._v("c.cbengin(),c.cend()")]),t._v(" "),s("td",[t._v("返回const_iterator")])])])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("反向容器的额外成员（不支持forward_list）")]),t._v(" "),s("th")])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("reverse_iterator")]),t._v(" "),s("td",[t._v("按逆序寻址元素的迭代器")])]),t._v(" "),s("tr",[s("td",[t._v("const_reverse_iterator")]),t._v(" "),s("td",[t._v("不能修改元素的逆序迭代器")])]),t._v(" "),s("tr",[s("td",[t._v("c.rbegin(), c.rend()")]),t._v(" "),s("td",[t._v("返回指向c的尾元素和首元素之前位置的迭代器")])]),t._v(" "),s("tr",[s("td",[t._v("c.crbegin(), c.crend()")]),t._v(" "),s("td",[t._v("返回const_reverse_iterator")])])])]),t._v(" "),s("p",[t._v("（1）迭代器")]),t._v(" "),s("p",[t._v("标准库的迭代器允许我们访问容器中的元素，所有迭代器都是通过解引用运算符来实现这个操作。")]),t._v(" "),s("p",[t._v("一个迭代器返回由一对迭代器表示，两个迭代器分别指向同一个容器中的元素或者是尾元素之后的位置。它们标记了容器中元素的一个范围。")]),t._v(" "),s("p",[t._v("左闭合区间：[begin, end)")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("begin "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v("end"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("begin "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("begin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("（2）容器类型成员")]),t._v(" "),s("p",[t._v("见概述")]),t._v(" "),s("p",[t._v("通过别名，可以在不了解容器中元素类型的情况下使用它。")]),t._v(" "),s("p",[t._v("（3）begin和end成员")]),t._v(" "),s("p",[t._v("begin是容器中第一个元素的迭代器")]),t._v(" "),s("p",[t._v("end是容器尾元素之后位置的迭代器")]),t._v(" "),s("p",[t._v("（4）容器定义和初始化")]),t._v(" "),s("p",[t._v("P290")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("C c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 默认构造函数")]),t._v("\nC "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("c1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nC c1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("c2\nC c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 列表初始化")]),t._v("\nC c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nC "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("c")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// c初始化为迭代器b和e指定范围中的元素的拷贝")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只有顺序容器（不包括array）的构造函数才能接受大小参数")]),t._v("\nC "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("seq")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nC "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("seq")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("p",[s("strong",[t._v("将一个容器初始化为另一个容器的拷贝")]),t._v(":")]),t._v(" "),s("p",[t._v("当将一个容器初始化为另一个容器的拷贝时，两个容器的容器类型和元素类型都必须相同。")]),t._v(" "),s("p",[t._v("不过，当传递迭代器参数来拷贝一个范围时，就不要求容器类型相同，只要能将要拷贝的元素转换为要初始化的容器的元素类型即可。")]),t._v(" "),s("p",[s("strong",[t._v("标注库array具有固定大小")]),t._v(":")]),t._v(" "),s("p",[t._v("不能对内置数组类型进行拷贝或对象赋值操作，但array并无此限制。P301")]),t._v(" "),s("p",[t._v("（5）赋值与swap")]),t._v(" "),s("p",[t._v("arrray类型不允许用花括号包围的值列表进行赋值。")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("array"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" a2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//所有元素均为0")]),t._v("\ns2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 错误！")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("seq.assign(b,e)   // 将seq中的元素替换为迭代器b和e所表示的范围中的元素。迭代器b和e不能指向seq中的元素。")]),t._v(" "),s("p",[t._v("swap用于交换2个相同类型容器的内容。调用swap之后，两个容器中的元素将交换。")]),t._v(" "),s("p",[t._v("（6）容器大小操作")]),t._v(" "),s("p",[t._v("size 返回容器中元素的数目")]),t._v(" "),s("p",[t._v("empty 当size为0返回布尔值true，否则返回false")]),t._v(" "),s("p",[t._v("max_size 返回一个大于或等于该类型容器所能容纳的最大元素数的值")]),t._v(" "),s("p",[t._v("（7）关系运算符")]),t._v(" "),s("p",[t._v("关系运算符左右两边的元素符对象必须是相同类型的容器。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("只有当元素类型也定义了相应的比较运算符，才可以使用关系元素安抚来比较两个容器")])]),t._v(" "),s("h3",{attrs:{id:"_9-3-顺序容器操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-3-顺序容器操作"}},[t._v("#")]),t._v(" 9.3 顺序容器操作")]),t._v(" "),s("p",[t._v("（1）向顺序容器添加元素")]),t._v(" "),s("p",[t._v("表格P305")]),t._v(" "),s("p",[s("strong",[t._v("使用push_back")]),t._v(":追加到容器尾部")]),t._v(" "),s("p",[s("strong",[t._v("使用push_front")]),t._v(":插入到容器头部")]),t._v(" "),s("p",[s("strong",[t._v("在容器中的特定位置添加元素")]),t._v(":使用insert")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("vector "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" svec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nsvec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("insert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("svec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("begin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello!"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[s("strong",[t._v("插入范围内元素")]),t._v(":使用insert")]),t._v(" "),s("p",[s("strong",[t._v("使用emplace操作")]),t._v(":")]),t._v(" "),s("p",[t._v("emplace_front、emplace和emplace_back分别对应push_front、insert和push_back。")]),t._v(" "),s("p",[t._v("emplace函数直接在容器中构造函数，不是拷贝。")]),t._v(" "),s("p",[t._v("（2）访问元素")]),t._v(" "),s("p",[t._v("P309")]),t._v(" "),s("p",[t._v("注意end是指向的是容器尾元素之后的元素。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("在顺序容器中访问元素的操作")]),t._v(" "),s("th")])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("c.back()")]),t._v(" "),s("td",[t._v("返回c中尾元素的引用。若c为空，函数行为未定义")])]),t._v(" "),s("tr",[s("td",[t._v("c.front()")]),t._v(" "),s("td",[t._v("返回c中首元素的引用。若c为空，哈数行为未定义")])]),t._v(" "),s("tr",[s("td",[t._v("c[n]")]),t._v(" "),s("td",[t._v("返回c中下标为n的元素的引用，n是一个无符号整数。若n>=size(),则函数行为未定义")])]),t._v(" "),s("tr",[s("td",[t._v("c.at[n]")]),t._v(" "),s("td",[t._v("返回下标为n的元素的引用。如果下标越界，则抛出out_of_range异常")])])])]),t._v(" "),s("p",[t._v("（3）删除元素")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("顺序容器的删除操作")]),t._v(" "),s("th")])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("c.pop_back()")]),t._v(" "),s("td",[t._v("删除c中尾元素。若c为空，则函数行为未定义。返回返回void")])]),t._v(" "),s("tr",[s("td",[t._v("c.pop_front()")]),t._v(" "),s("td",[t._v("删除c中首元素。若c为空，则函数行为未定义。返回void")])]),t._v(" "),s("tr",[s("td",[t._v("c.erase(p)")]),t._v(" "),s("td",[t._v("删除迭代器p所指定的元素，返回一个指向被删除元素之后元素的迭代器，如p指向尾元素，则返回尾后(off-the-end)迭代器。若p是尾后迭代器，则函数行为未定义")])]),t._v(" "),s("tr",[s("td",[t._v("c.erase(b, e)")]),t._v(" "),s("td",[t._v("删除迭代器b和e所指定范围内的元素。返回一个指向最后一个被删除元素之后元素的迭代器。若e本身就是尾后迭代器，则函数也返回尾后迭代器")])]),t._v(" "),s("tr",[s("td",[t._v("c.claer()")]),t._v(" "),s("td",[t._v("删除c中的所有元素。返回void")])])])]),t._v(" "),s("p",[t._v("（4）特殊的forwar_list操作")]),t._v(" "),s("p",[t._v("P313")]),t._v(" "),s("p",[t._v("befor_begin();cbefore_begin();insert_after;emplace_after;erase_after;")]),t._v(" "),s("p",[t._v("（5）改变容器大小")]),t._v(" "),s("p",[t._v("reseize用于扩大或者缩小容器。")]),t._v(" "),s("p",[t._v("resize操作接受一个可选的元素值参数，用来初始化添加到容器内的元素。")]),t._v(" "),s("p",[t._v("如果容器保存的是类类型元素，且resize向容器中添加新元素，则必须提供初始值，或者元素类型必须提供一个默认构造函数。")]),t._v(" "),s("h3",{attrs:{id:"_9-4-vector对象是如何增长的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-4-vector对象是如何增长的"}},[t._v("#")]),t._v(" 9.4 vector对象是如何增长的")]),t._v(" "),s("p",[t._v("为了避免影性能，标准库采用了可以减少容器空间重新分配次数的策略。当不得不获取新的内存空间时，vector和string通常会分配比新的新的空间需求更大的内存空间。容器预留这些空间作为备用，可以用来保存更多的新元素。")]),t._v(" "),s("p",[s("strong",[t._v("容器管理的成员函数")]),t._v(":")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("容器大小管理擦作")]),t._v(" "),s("th")])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("c.shrink_to_fit()")]),t._v(" "),s("td",[t._v("请将capacity()减少为与size()相同大小")])]),t._v(" "),s("tr",[s("td",[t._v("c.capacity()")]),t._v(" "),s("td",[t._v("不重新分配内存空间的话,c可以保存多少元素")])]),t._v(" "),s("tr",[s("td",[t._v("c.reverse()")]),t._v(" "),s("td",[t._v("分配至少能容纳n个元素的内存空间。reverse并不改变容器中元素的数量，它仅影响vector预先分配多大的内存空间。调用reverse永远不减少容器占用的内存空间。")])])])]),t._v(" "),s("p",[s("strong",[t._v("capcacity和size")]),t._v(":")]),t._v(" "),s("p",[t._v("区别：")]),t._v(" "),s("p",[t._v("容器的size是指它已经保存的元素的数目；")]),t._v(" "),s("p",[t._v("capcacity则是在不分配新的内存空间的前提下它最多可以保存多少元素。")]),t._v(" "),s("p",[t._v("注意：只有当迫不得已时才可以分配新的内存空间。")]),t._v(" "),s("h3",{attrs:{id:"_9-5-额外的string操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-5-额外的string操作"}},[t._v("#")]),t._v(" 9.5 额外的string操作")]),t._v(" "),s("p",[t._v("（1）构造string的其他方法")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("构造string的其他方法")]),t._v(" "),s("th")])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("string s(cp, n)")]),t._v(" "),s("td",[t._v("s是cp指向的数组中前n个字符的拷贝")])]),t._v(" "),s("tr",[s("td",[t._v("string s(s2, pos2)")]),t._v(" "),s("td",[t._v("s是string s2从下标pos2开始的字符的拷贝。")])]),t._v(" "),s("tr",[s("td",[t._v("string s (s2, pos2, len2)")]),t._v(" "),s("td",[t._v("s是string s2从下标pos2开始len2个字符的拷贝")])])])]),t._v(" "),s("p",[s("strong",[t._v("substr操作")]),t._v(":")]),t._v(" "),s("p",[t._v("substr操作返回一个string，它是原始string的一部分或全部的拷贝。")]),t._v(" "),s("p",[t._v("s.substr(pos, n)  返回一个string，包含s中从pos开始的n个字符的拷贝。pos的默认值为0。n的默认值为s.size() - pos， 即拷贝从pos开始的所有字符")]),t._v(" "),s("p",[t._v("（2）改变string的其他方法")]),t._v(" "),s("p",[t._v("assign  替换赋值，总是替换string中的所有内容")]),t._v(" "),s("p",[t._v("insert  插入")]),t._v(" "),s("p",[t._v("append 末尾插入，总是将新字符追加到string末尾")]),t._v(" "),s("p",[t._v("replace 删除再插入")]),t._v(" "),s("p",[t._v("（3）string搜索操作")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("string搜索操作")]),t._v(" "),s("th")])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("s.find(args)")]),t._v(" "),s("td",[t._v("查找s中args第一次出现的位置")])]),t._v(" "),s("tr",[s("td",[t._v("s.rfind(args)")]),t._v(" "),s("td",[t._v("查找s中args最后一次出现的位置")])]),t._v(" "),s("tr",[s("td",[t._v("s.find_first_of(args)")]),t._v(" "),s("td",[t._v("在s中查找args中任何一个字符第一次出现的位置")])]),t._v(" "),s("tr",[s("td",[t._v("s.find_last_of(args)")]),t._v(" "),s("td",[t._v("在s中查找args中任何一个字符最后一次出现的位置")])]),t._v(" "),s("tr",[s("td",[t._v("s.find_first_not_of(args)")]),t._v(" "),s("td",[t._v("在s中查找第一个不在args中的字符")])]),t._v(" "),s("tr",[s("td",[t._v("s.find_last_not_of(args)")]),t._v(" "),s("td",[t._v("在s中查找最后一个不在args中的字符")])])])]),t._v(" "),s("p",[t._v("（4）compare函数")]),t._v(" "),s("p",[t._v("compare有6个版本，P327")]),t._v(" "),s("p",[t._v("（5）数值转换")]),t._v(" "),s("p",[t._v("P328")]),t._v(" "),s("p",[t._v("tostring")]),t._v(" "),s("p",[t._v("stod")]),t._v(" "),s("h3",{attrs:{id:"_9-6-容器适配器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-6-容器适配器"}},[t._v("#")]),t._v(" 9.6 容器适配器")]),t._v(" "),s("p",[t._v("顺序容器适配器：")]),t._v(" "),s("p",[t._v("stack; queue; priority_queue;")]),t._v(" "),s("p",[t._v("适配器是一种机制，能使某种事物看起来像另外一种事物。")]),t._v(" "),s("p",[s("strong",[t._v("定义一个适配器")]),t._v(":")]),t._v(" "),s("p",[t._v("适配器有2个构造函数:")]),t._v(" "),s("blockquote",[s("p",[t._v("1、默认构造函数创建一个空对象")]),t._v(" "),s("p",[t._v("2、接受一个容器的构造函数")])]),t._v(" "),s("p",[s("strong",[t._v("栈适配器")]),t._v(":")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("栈的操作")]),t._v(" "),s("th")])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("s.pop()")]),t._v(" "),s("td",[t._v("删除栈顶元素，但不返回该元素值")])]),t._v(" "),s("tr",[s("td",[t._v("s.push(item)")]),t._v(" "),s("td",[t._v("创建一个新元素压入栈顶，该元素通过拷贝或移动item而来，或者由args构造")])]),t._v(" "),s("tr",[s("td",[t._v("s.emplace(args)")]),t._v(" "),s("td",[t._v("由arg构造")])]),t._v(" "),s("tr",[s("td",[t._v("s.top()")]),t._v(" "),s("td",[t._v("返回栈顶元素，但不将元素弹出栈")])])])]),t._v(" "),s("p",[s("strong",[t._v("队列适配器")]),t._v(":")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("queue和priority_queue操作")]),t._v(" "),s("th")])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("q.pop()")]),t._v(" "),s("td",[t._v("返回queue的首元素或priority_queue的最高优先级的元素，但不删除此元素")])]),t._v(" "),s("tr",[s("td",[t._v("q.front()                  q.back()")]),t._v(" "),s("td",[t._v("返回首元素或尾元素，但不删除此元素。只适用于queue")])]),t._v(" "),s("tr",[s("td",[t._v("q.top()")]),t._v(" "),s("td",[t._v("返回最高优先级元素，但不删除该元素。只适用于priority_queue")])]),t._v(" "),s("tr",[s("td",[t._v("q.push(item) q.empalce(args)")]),t._v(" "),s("td",[t._v("在queue末尾或priority_queue中恰当的位置创建一个元素，其值为item,或者由args构造")])])])]),t._v(" "),s("h3",{attrs:{id:"术语-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#术语-3"}},[t._v("#")]),t._v(" 术语")]),t._v(" "),s("p",[t._v("begin容器操作：返回一个指向容器首元素的迭代器，如果容器为空，则返回尾后迭代器。是否返回const迭代器依赖于容器的类型。")]),t._v(" "),s("p",[t._v("cbegin容器操作：返回一个指向容器尾元素之后的const_iterator。")]),t._v(" "),s("h2",{attrs:{id:"第十章-泛型算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第十章-泛型算法"}},[t._v("#")]),t._v(" 第十章 泛型算法")]),t._v(" "),s("p",[t._v("P336-P371")]),t._v(" "),s("p",[t._v("标准库并未给每个容器添加大量功能，而是提供了一组算法。这些算法是通用的，可以用于不同类型的容器和不同类型的元素。")]),t._v(" "),s("h3",{attrs:{id:"_10-1-概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-1-概述"}},[t._v("#")]),t._v(" 10.1 概述")]),t._v(" "),s("p",[t._v("头文件：algorithm、numeric")]),t._v(" "),s("p",[t._v("算法不依赖于容器，但算法依赖于元素类型的操作。")]),t._v(" "),s("h3",{attrs:{id:"_10-2-初识泛型算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-2-初识泛型算法"}},[t._v("#")]),t._v(" 10.2 初识泛型算法")]),t._v(" "),s("p",[t._v("（1）只读算法")]),t._v(" "),s("p",[t._v("accumulate  求和")]),t._v(" "),s("p",[t._v("equal 是否相等")]),t._v(" "),s("p",[t._v("（2）写容器元素的算法")]),t._v(" "),s("p",[t._v("算法不检查写操作")]),t._v(" "),s("p",[t._v("拷贝算法：copy")]),t._v(" "),s("p",[t._v("重排容器元素的算法：sort")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("标准库函数对迭代器而不是容器进行操作。因此，算法不能直接添加或删除元素")])]),t._v(" "),s("h3",{attrs:{id:"_10-3-定制操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-3-定制操作"}},[t._v("#")]),t._v(" 10.3 定制操作")]),t._v(" "),s("p",[t._v("标准库允许我们提供自己定义的操作来代替默认运算符。")]),t._v(" "),s("p",[t._v("（1）向算法传递函数")]),t._v(" "),s("p",[s("strong",[t._v("谓词")]),t._v(":")]),t._v(" "),s("p",[t._v("谓词是一个可调用的表达式，其返回结果是一个能用作条件的值。")]),t._v(" "),s("blockquote",[s("p",[t._v("标准库算法的谓词分为两类：")]),t._v(" "),s("p",[t._v("1、一元谓词：只接受单一参数。")]),t._v(" "),s("p",[t._v("2、二元谓词：接受两个参数。")])]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isShorter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" string "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("s1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" string "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("s2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    retrun s1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" s2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("words"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("begin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" words"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" isShorter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[s("strong",[t._v("排序算法")]),t._v(":")]),t._v(" "),s("p",[t._v("stable_sort算法维持相等元素的原有顺序。")]),t._v(" "),s("p",[t._v("（2）lambda表达式")]),t._v(" "),s("p",[s("strong",[t._v("lamba")]),t._v(":")]),t._v(" "),s("p",[t._v("lambda表达式表示一个可调用的代码单元。一个lambda具有一个返回类型、一个参数列表和一个函数体。")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("capture list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parameter list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" type "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("function body"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// capture list 捕获列表，lambda所在函数中定义的局部变量")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 捕获列表只用于局部非static变量，lambda可以直接使用局部static变量和在它所在函数之外声明的名字")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// lambda必须使用尾置返回来指定返回类型")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("（3）lambda捕获和返回")]),t._v(" "),s("p",[t._v("两种：值捕获、引用捕获")]),t._v(" "),s("p",[t._v("::: warnning")]),t._v(" "),s("p",[t._v("当以引用方式捕获一个变量时，必须保证在lambda执行时变量是存在的。")]),t._v(" "),s("p",[t._v("一般的，应该尽量减少捕获的数据量，来避免潜在的问题。")]),t._v(" "),s("p",[t._v("如果可能，避免捕获指针或引用。")]),t._v(" "),s("p",[t._v(":::")]),t._v(" "),s("p",[s("strong",[t._v("隐式捕获")]),t._v("：")]),t._v(" "),s("p",[t._v("当混合使用隐式捕获和显式捕获时，捕获列表中的第一个元素必须是一个&或=。显式捕获的变量必须使用与隐式捕获不同的方式。")]),t._v(" "),s("p",[t._v("lambda捕获列表 P352")]),t._v(" "),s("p",[s("strong",[t._v("可变lambda")]),t._v(":")]),t._v(" "),s("p",[t._v("若希望改变一个被捕获的变量的值，必须在参数列表首加上关键字mutable。")]),t._v(" "),s("p",[s("strong",[t._v("指定lambda返回类型")]),t._v(":")]),t._v(" "),s("p",[t._v("当需要为lambda定义返回类型时，必须使用尾置返回类型。")]),t._v(" "),s("p",[t._v("（4）参数绑定")]),t._v(" "),s("p",[s("strong",[t._v("标准库bind函数")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" newCallable "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("callable"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arg_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用newCallable时，newCallable会调用callable,并传递给它arg_list中的参数")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("h3",{attrs:{id:"_10-4-再探迭代器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-4-再探迭代器"}},[t._v("#")]),t._v(" 10.4 再探迭代器")]),t._v(" "),s("p",[t._v("插入迭代器、流迭代器、反向迭代器、移动迭代器")]),t._v(" "),s("p",[t._v("（1）插入迭代器")]),t._v(" "),s("p",[t._v("back_inserter：创建一个使用push_back的迭代器")]),t._v(" "),s("p",[t._v("front_inserter：创建一个使用push_front的迭代器")]),t._v(" "),s("p",[t._v("inserter：创建一个使用inserter的迭代器")]),t._v(" "),s("p",[t._v("（2）iostream迭代器")]),t._v(" "),s("p",[t._v("istream_iterator 读取输入流")]),t._v(" "),s("p",[t._v("ostream_iterator 向一个输出流写数据")]),t._v(" "),s("p",[s("strong",[t._v("istream_iterator操作")]),t._v(":")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("istream-iterator操作")]),t._v(" "),s("th")])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("istream_iterator<T> in(is);")]),t._v(" "),s("td",[t._v("in从输入流is读取类型为T的值")])]),t._v(" "),s("tr",[s("td",[t._v("istream_iterator<T> end;")]),t._v(" "),s("td",[t._v("读取类型为T的值得istream_iterator迭代器，表示尾后位置")])]),t._v(" "),s("tr",[s("td",[t._v("in1 == in2              in1 != in2")]),t._v(" "),s("td",[t._v("in1和in2必须读取相同类型。如果它们都是尾后迭代器，或绑定到相同的输入，则两者相等")])]),t._v(" "),s("tr",[s("td",[t._v("*in")]),t._v(" "),s("td",[t._v("返回从流中读取的值")])]),t._v(" "),s("tr",[s("td",[t._v("in->mem")]),t._v(" "),s("td",[t._v("与(*in).mem含义相同")])]),t._v(" "),s("tr",[s("td",[t._v("++in, in++")]),t._v(" "),s("td",[t._v("用>>从输入流读取下一个值")])])])]),t._v(" "),s("p",[s("strong",[t._v("ostream_iterator操作")]),t._v(":")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("ostream_iterator操作")]),t._v(" "),s("th")])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("ostream_iterator<T> out(os);")]),t._v(" "),s("td",[t._v("out将类型为T的值写到输出流os中")])]),t._v(" "),s("tr",[s("td",[t._v("ostream_iterator<T> out(os, d);")]),t._v(" "),s("td",[t._v("out将类型为T的值写到输出流os中，每个值后面都输出一个d。d指向一个空字符串结尾的字符数组")])]),t._v(" "),s("tr",[s("td",[t._v("out = val")]),t._v(" "),s("td",[t._v("用<<将val写入到out所绑定的ostream中")])]),t._v(" "),s("tr",[s("td",[t._v("*out, ++out, out++")]),t._v(" "),s("td")])])]),t._v(" "),s("p",[t._v("（3）反向迭代器")]),t._v(" "),s("p",[t._v("反向迭代器就是在容器中从尾元素向首元素反向移动的迭代器。")]),t._v(" "),s("h3",{attrs:{id:"_10-5-泛型算法结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-5-泛型算法结构"}},[t._v("#")]),t._v(" 10.5 泛型算法结构")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("迭代器类别")]),t._v(" "),s("th")])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("输入迭代器")]),t._v(" "),s("td",[t._v("只读、不写；单遍扫描，只能递增")])]),t._v(" "),s("tr",[s("td",[t._v("输出迭代器")]),t._v(" "),s("td",[t._v("只写，不读；单遍扫描，只能递增")])]),t._v(" "),s("tr",[s("td",[t._v("前向迭代器")]),t._v(" "),s("td",[t._v("可读写；多遍扫描，只能递增")])]),t._v(" "),s("tr",[s("td",[t._v("双向迭代器")]),t._v(" "),s("td",[t._v("可读写，多遍扫描，可递增递减")])]),t._v(" "),s("tr",[s("td",[t._v("随机访问迭代器")]),t._v(" "),s("td",[t._v("可读写，多遍扫描，支持全部迭代器运算")])])])]),t._v(" "),s("h3",{attrs:{id:"_10-6-特定容器算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-6-特定容器算法"}},[t._v("#")]),t._v(" 10.6 特定容器算法")]),t._v(" "),s("p",[t._v("对于list、forward_list，应该优先使用成员函数的算法而不是通用算法。")]),t._v(" "),s("h3",{attrs:{id:"_10-7-术语"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-7-术语"}},[t._v("#")]),t._v(" 10.7 术语")]),t._v(" "),s("p",[t._v("cref标准库函数：返回一个可拷贝的对象，其中保存了一个指向不可拷贝类型的const对象的引用")]),t._v(" "),s("h2",{attrs:{id:"第十一章-关联容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第十一章-关联容器"}},[t._v("#")]),t._v(" 第十一章 关联容器")]),t._v(" "),s("p",[t._v("P374-P397")]),t._v(" "),s("p",[t._v("关联容器支持高效的关键字查找和访问。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("类型")]),t._v(" "),s("th",[t._v("备注")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("map")]),t._v(" "),s("td",[t._v("关联数组，保存关键字-值对")])]),t._v(" "),s("tr",[s("td",[t._v("set")]),t._v(" "),s("td",[t._v("值保存关键字的容器")])]),t._v(" "),s("tr",[s("td",[t._v("multimap")]),t._v(" "),s("td",[t._v("关键字可重复出现的map")])]),t._v(" "),s("tr",[s("td",[t._v("multiset")]),t._v(" "),s("td",[t._v("关键字可重复出现的set")])]),t._v(" "),s("tr",[s("td",[t._v("unordered_map")]),t._v(" "),s("td",[t._v("用哈希函数组织的map")])]),t._v(" "),s("tr",[s("td",[t._v("unordered_set")]),t._v(" "),s("td",[t._v("用哈希函数组织的set")])]),t._v(" "),s("tr",[s("td",[t._v("unordered_multimap")]),t._v(" "),s("td",[t._v("哈希组织的map；关键字可以重复出现")])]),t._v(" "),s("tr",[s("td",[t._v("unordered_multiset")]),t._v(" "),s("td",[t._v("哈希组织的set；关键字可以重复出现")])])])]),t._v(" "),s("h3",{attrs:{id:"_11-1-使用关联容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-1-使用关联容器"}},[t._v("#")]),t._v(" 11.1 使用关联容器")]),t._v(" "),s("p",[t._v("map是关键词-值对的集合。")]),t._v(" "),s("p",[t._v("为了定义一个map，我们必须指定关键字和值的类型。")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 统计每个单词在输入中出现的次数")]),t._v("\nmap"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" size_t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" word_count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstring word"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cin "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" word"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("word_count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("word"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("w "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" word_count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  \tcount "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" w"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("first "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('" cccurs "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" w"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("second \n  \t\t\t\t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("w"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("second "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('" times"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"time"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[t._v("set是关键字的简单集合。")]),t._v(" "),s("p",[t._v("为了定义一个set，必须指定其元素类型。")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 统计输入中每个单词出现的次数，并忽略常见单词")]),t._v("\nmap"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" size_t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" word_count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nset"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" exclude "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"the"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"But"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstring word"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cin "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" word"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只统计不在exclude中的单词")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exclude"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("word"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" exclude"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("word_count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("word"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取并递增word的计数器")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("h3",{attrs:{id:"_11-2-关联容器概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-2-关联容器概述"}},[t._v("#")]),t._v(" 11.2 关联容器概述")]),t._v(" "),s("p",[t._v("（1）定义关联容器")]),t._v(" "),s("p",[t._v("定义map时，必须指明关键字类型又指明值类型；")]),t._v(" "),s("p",[t._v("定义set时，只需指明关键字类型。")]),t._v(" "),s("p",[t._v("（2）pair类型")]),t._v(" "),s("p",[t._v("pair标准库类型定义在头文件utility中。")]),t._v(" "),s("p",[t._v("一个pair保存两个数据成员。当创建一个pair时，必须提供两个类型名。")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("pair"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" string"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" anon"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 保存两个string")]),t._v("\npair"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" string"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" author"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"James"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Joyce"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 也可为每个成员提供初始化器")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("pair的数据类型是public的，两个成员分别命名为first和second。")]),t._v(" "),s("p",[t._v("pair上的操作，见表，P380")]),t._v(" "),s("h3",{attrs:{id:"_11-3-关联容器操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-3-关联容器操作"}},[t._v("#")]),t._v(" 11.3 关联容器操作")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("关联容器额外的类型别名")]),t._v(" "),s("th")])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("key_type")]),t._v(" "),s("td",[t._v("此容器类型的关键字类型")])]),t._v(" "),s("tr",[s("td",[t._v("mapped_type")]),t._v(" "),s("td",[t._v("每个关键字关联的类型，只适用于map")])]),t._v(" "),s("tr",[s("td",[t._v("value_type")]),t._v(" "),s("td",[t._v("对于set，与key_type相同；对于map，为pair<const key_type, mapped_type>")])])])]),t._v(" "),s("p",[t._v("（1）关联容器迭代器")]),t._v(" "),s("p",[t._v("set的迭代器是const的")]),t._v(" "),s("p",[t._v("set和map的关键字都是const的")]),t._v(" "),s("p",[s("strong",[t._v("遍历关联容器")]),t._v("：")]),t._v(" "),s("p",[t._v("map和set都支持begin和end操作。使用beigin、end获取迭代器，然后用迭代器来遍历容器。")]),t._v(" "),s("p",[t._v("（2）添加元素")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("关联容器insert操作")]),t._v(" "),s("th")])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("c.insert(v)")]),t._v(" "),s("td",[t._v("v是value_type类型的对象;")])]),t._v(" "),s("tr",[s("td",[t._v("c.emplace(args)")]),t._v(" "),s("td",[t._v("args用来构造一个元素")])]),t._v(" "),s("tr",[s("td",[t._v("c.insert(b, e)")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("c.insert(il)")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("c.insert(p, v)")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("c.emplace(p ,args)")]),t._v(" "),s("td")])])]),t._v(" "),s("p",[t._v("（3）删除元素")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("从关联容器删除元素")]),t._v(" "),s("th")])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("c.erase(k)")]),t._v(" "),s("td",[t._v("从c中删除每个关键字为k的元素。返回一个size_type值，指出删除的元素的数量")])]),t._v(" "),s("tr",[s("td",[t._v("c.erase(p)")]),t._v(" "),s("td",[t._v("从c中删除迭代器p指定的元素。p必须指向c中一个真实元素，不能等于c.end()。返回一个指向p之后元素的迭代器，若p指向c中的尾元素，则返回.end()")])]),t._v(" "),s("tr",[s("td",[t._v("c.erase(b, e)")]),t._v(" "),s("td",[t._v("删除迭代器b和e所表示的范围中的元素。返回e")])])])]),t._v(" "),s("p",[t._v("（4）map的下标操作")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("map和unorder_map的下标操作")]),t._v(" "),s("th")])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("c[k]")]),t._v(" "),s("td",[t._v("返回关键字为k的元素；如果k不在c中，添加一个关键字为k的元素，对其进行值初始化")])]),t._v(" "),s("tr",[s("td",[t._v("c.at[k]")]),t._v(" "),s("td",[t._v("访问关键字为k的元素，带参数检查；若k不在c中，抛出一个out_of_range异常")])])])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("map进行下标操作，会获得mapped_type对象；当解引用时，会得到value_type对象。")])]),t._v(" "),s("p",[t._v("（5）访问元素")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回一个迭代器，指向第一个关键字k的元素，如k不在容器中，则返回尾后迭代器")]),t._v("\nc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回关键字等于k的元素的数量。对于不允许重复关键字的容器，返回值永远是0或1")]),t._v("\nc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("lower_bound")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回一个迭代器，指向第一个关键字不小于k的元素;不适用于无序容器")]),t._v("\nc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("upper_bound")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回一个迭代器，指向第一个关键字大于k的元素；不适用于无序容器")]),t._v("\nc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("equal_bound")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回一个迭代器pair，表示关键字等于k的元素的范围。如k不存在，pair的两个成员均等于c.end()")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("h3",{attrs:{id:"_11-4-无序容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-4-无序容器"}},[t._v("#")]),t._v(" 11.4 无序容器")]),t._v(" "),s("p",[t._v("无序容器使用关键字类型的==运算符和一个hash<key_type>类型的对象来组织元素。")]),t._v(" "),s("p",[t._v("无序容器在存储上组织为一组桶，适用一个哈希函数将元素映射到桶。")]),t._v(" "),s("p",[t._v("无序容器管理操作，表格，P395")]),t._v(" "),s("p",[t._v("还可以自定义自己的hash模板 P396")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" SD_multiset "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" unordered_multiset"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Sales_data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("decltype")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hasher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("decltype")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("eqOp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSD_multiset "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bookStore")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" haser"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" eqOp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("h2",{attrs:{id:"第十二章-动态内存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第十二章-动态内存"}},[t._v("#")]),t._v(" 第十二章 动态内存")]),t._v(" "),s("p",[t._v("P400-P436")]),t._v(" "),s("h3",{attrs:{id:"_12-1-动态指针与智能指针"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12-1-动态指针与智能指针"}},[t._v("#")]),t._v(" 12.1 动态指针与智能指针")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("智能指针")]),t._v(" "),s("th",[t._v("用途")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("shared_ptr")]),t._v(" "),s("td",[t._v("提供所有权共享的智能指针：对共享对象来说，当最后一个指向它的shared_ptr被销毁时会被释放。")])]),t._v(" "),s("tr",[s("td",[t._v("unique_ptr")]),t._v(" "),s("td",[t._v("提供独享所有权的智能指针：当unique_ptr被销毁的时，它指向的独享被释放。unique_ptr不能直接拷贝或赋值。")])]),t._v(" "),s("tr",[s("td",[t._v("weak_ptr")]),t._v(" "),s("td",[t._v("一种智能指针，指向由shared_ptr管理的对象。在确定是否应释放对象视，shared_ptr并不把weak_ptr统计在内。")])])])]),t._v(" "),s("p",[t._v("（1）shared_ptr类")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("shared_ptr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" p1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("make_shared函数")]),t._v(":")]),t._v(" "),s("p",[t._v("make_shared在动态内存中分配一个对象并初始化它，返回此对象的shared_ptr。")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("share_ptr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" p3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token generic-function"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("make_shared")]),s("span",{pre:!0,attrs:{class:"token generic class-name"}},[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("shared_ptr的拷贝和赋值")]),t._v(":")]),t._v(" "),s("p",[t._v("每个shared_ptr都有一个关联的计数器，称为引用计数。一旦一个shared_ptr的引用计数变为0，就会自动释放自己所管理的对象。")]),t._v(" "),s("p",[t._v("（2）直接管理内存")]),t._v(" "),s("p",[t._v("运算符new分配分配内存，delete释放new分配的内存。")]),t._v(" "),s("p",[s("strong",[t._v("使用new动态分配和初始化对象")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 默认情况下，动态分配的对象是默认初始化的")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pi "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// pi指向一个动态分配的、未初始化的无名对象")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 直接初始化方式")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pi "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// pi指向的对象的值为1024")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对动态分配的对象进行值初始化，只需在类型名之后加上一对空括号")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pi1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 默认值初始化；*pi1的值未定义")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pi2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 值初始化为0；*pi2为0")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[s("strong",[t._v("动态分配的const对象")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pci "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("释放动态内存")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("delete表达式执行两个动作：销毁给定的指针指向的对象；释放对应的内存。")]),t._v(" "),s("p",[t._v("（3）unique_ptr")]),t._v(" "),s("p",[t._v("某个时刻，只能有一个unique_ptr指向一个给定对象。")]),t._v(" "),s("p",[t._v("当unique_ptr销毁时，它所指向的对象也被销毁。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("unique_ptr操作")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("unique_ptr<T> u1")])]),t._v(" "),s("tr",[s("td",[t._v("unique_ptr<T, D> u2")])]),t._v(" "),s("tr",[s("td",[t._v("unique_ptr<T, D> u(d)")])]),t._v(" "),s("tr",[s("td",[t._v("u = nullptr")])]),t._v(" "),s("tr",[s("td",[t._v("u.release()")])]),t._v(" "),s("tr",[s("td",[t._v("u.reset()")])]),t._v(" "),s("tr",[s("td",[t._v("u.reset(p)")])]),t._v(" "),s("tr",[s("td",[t._v("u.reset(nullptr)")])])])]),t._v(" "),s("p",[t._v("（4）weak_ptr")]),t._v(" "),s("p",[t._v("weak+ptr是一种不受控制所指向对象生存期的智能指针，它指向由一个shared_ptr管理的对象，而且不会改变shared_ptr的引用计数。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("weak_ptr 操作")]),t._v(" "),s("th")])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("weak_ptr<T> w")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("weak_ptr<T> w(sp)")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("w = p")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("w.reset()")]),t._v(" "),s("td",[t._v("将w置空")])]),t._v(" "),s("tr",[s("td",[t._v("w.use_count()")]),t._v(" "),s("td",[t._v("与w共享对象的shared_ptr的数量")])]),t._v(" "),s("tr",[s("td",[t._v("w.expired()")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("w.lock()")]),t._v(" "),s("td")])])]),t._v(" "),s("p",[t._v("使用weak_ptr之前，需要调用lock，检查weak_ptr指向的对象是否存在。")]),t._v(" "),s("h3",{attrs:{id:"_12-2-动态数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12-2-动态数组"}},[t._v("#")]),t._v(" 12.2 动态数组")]),t._v(" "),s("p",[t._v("（1）new和数组")]),t._v(" "),s("p",[t._v("在类型名之后跟一对方括号，在其中指明要分配的对象的数目。")]),t._v(" "),s("p",[t._v("释放动态数组：")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// p必须指向一个动态分配的对象或为空")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" pa"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// pa必须指向一个动态分配的数组或为空")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("智能指针和动态数组")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("unique_ptr<T []> u;\nunique_ptr<T []> u(p);\nu[i];\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("（2）allocator类")]),t._v(" "),s("p",[t._v("标准库allocator类定义在头文件memory中，帮助将内存和对象构造分离开来。")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("allocator"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" alloc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" alloc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("allocate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("table",[s("thead",[s("tr",[s("th",[t._v("表达式")]),t._v(" "),s("th",[t._v("作用")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("allocator[T] a")]),t._v(" "),s("td",[t._v("定义了一个名为a的allocator对象，它可以为类型为T的对象分配内存")])]),t._v(" "),s("tr",[s("td",[t._v("a.allocate(n)")]),t._v(" "),s("td",[t._v("分配一段原始的、未构造的内存，保存n个类型为T的对象")])]),t._v(" "),s("tr",[s("td",[t._v("a.construct(p, args)")]),t._v(" "),s("td",[t._v("为了使用allocate返回的内存，我们必须使用construct构造对象。使用未构造的内存，其行为是未定义的。")])]),t._v(" "),s("tr",[s("td",[t._v("a.destroy(p)")]),t._v(" "),s("td",[t._v("p为T*类型的指针，此算法对p指向的对象执行析构函数")])])])]),t._v(" "),s("h3",{attrs:{id:"术语-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#术语-4"}},[t._v("#")]),t._v(" 术语")]),t._v(" "),s("p",[s("em",[t._v("new")]),t._v(" : 从自由空间分配内存。new T 分配并构造一个类型为T的指针。如果T是一个数组类型，new 返回一个指向数组首元素的指针。类似的，new  [n]  T 分配 n 个类型为T的对象，并返回指向数组首元素的指针。")]),t._v(" "),s("p",[s("em",[t._v("空悬指针")]),t._v("：一个指针，指向曾经保存一个对象但现在已释放的内存。")]),t._v(" "),s("p",[s("em",[t._v("智能指针")]),t._v("：标准库类型。负责在恰当的时候释放内存。")]),t._v(" "),s("h2",{attrs:{id:"第十三章-拷贝控制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第十三章-拷贝控制"}},[t._v("#")]),t._v(" 第十三章 拷贝控制")]),t._v(" "),s("p",[t._v("P440-P486")]),t._v(" "),s("p",[t._v("五种拷贝控制操作：")]),t._v(" "),s("p",[t._v("拷贝构造函数、拷贝赋值运算符、移动构造函数、移动赋值运算符、析构函数。")]),t._v(" "),s("p",[t._v("拷贝构造函数、移动构造函数定义了当用同类型的另一个对象初始化本对象时做什么。")]),t._v(" "),s("p",[t._v("拷贝赋值运算符、移动赋值运算符定义了将一个对象赋予同类型的另一个对象时做什么。")]),t._v(" "),s("p",[t._v("析构函数定义了当此类型对象销毁时做什么。")]),t._v(" "),s("h3",{attrs:{id:"_13-1-拷贝、赋值与销毁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-1-拷贝、赋值与销毁"}},[t._v("#")]),t._v(" 13.1 拷贝、赋值与销毁")]),t._v(" "),s("p",[t._v("（1）拷贝构造函数")]),t._v(" "),s("p",[t._v("拷贝构造函数的第一个参数必须是一个引用类型。")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 默认构造函数")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Foo"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 拷贝构造函数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[s("strong",[t._v("合成拷贝构造函数")]),t._v(":")]),t._v(" "),s("p",[t._v("若未定义拷贝构造函数，编译器会定义一个。")]),t._v(" "),s("p",[s("strong",[t._v("拷贝初始化")]),t._v(":")]),t._v(" "),s("p",[t._v("拷贝初始化，要求编译器将右运算对象拷贝到正在创建的对象中。拷贝初始化通常使用拷贝构造函数来完成。")]),t._v(" "),s("p",[t._v("（2）拷贝赋值运算符")]),t._v(" "),s("p",[t._v("重载赋值运算符：oprator=")]),t._v(" "),s("p",[t._v("合成拷贝赋值运算符：若一个类未定义自己的拷贝赋值运算符，编译器会为它生成一个合成拷贝赋值运算符。")]),t._v(" "),s("p",[t._v("（3）析构函数")]),t._v(" "),s("p",[t._v("析构函数：用于释放对象使用的资源，销毁对象的非static数据成员。")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 析构函数，一个类只会有唯一一个析构函数。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("在一个析构函数中，不存在类似构造函数中初始化列表的东西来控制成员如何销毁，析构部分是隐式的。销毁类类型的成员需要执行成员自己的析构函数。")]),t._v(" "),s("p",[s("strong",[t._v("合成析构函数")]),t._v("：当一个类未定义自己的析构函数时，编译器会为它定义一个合成析构函数。")]),t._v(" "),s("p",[t._v("析构函数体本身并不直接销毁成员。")]),t._v(" "),s("p",[t._v("（4）三五法则")]),t._v(" "),s("p",[t._v("P447")]),t._v(" "),s("p",[t._v("需要析构函数的类也需要拷贝和赋值操作")]),t._v(" "),s("p",[t._v("需要拷贝操作的类也需要赋值操作，反之亦然")]),t._v(" "),s("p",[t._v("（5）使用default=")]),t._v(" "),s("p",[t._v("将拷贝控制成员定义为=dafault来显式地要求编译器生活才能合成的版本。")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Sales_data")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sales_data")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Sales_data"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("（6）阻止拷贝")]),t._v(" "),s("p",[t._v("在函数参数列表后面加上=delete。")]),t._v(" "),s("p",[t._v("=delete必须出现在函数第一次声明的时候。")]),t._v(" "),s("p",[t._v("析构函数不能是删除的成员")]),t._v(" "),s("p",[s("strong",[t._v("合成的拷贝控制成员可能是删除的")]),t._v(":")]),t._v(" "),s("p",[t._v("如果一个类有数据成员不能默认构造、拷贝、复制或销毁，则对应的成员函数将被定义为删除的。")]),t._v(" "),s("h3",{attrs:{id:"_13-2-拷贝控制和资源管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-2-拷贝控制和资源管理"}},[t._v("#")]),t._v(" 13.2 拷贝控制和资源管理")]),t._v(" "),s("p",[t._v("（1）行为像值的类")]),t._v(" "),s("p",[t._v("为了提供类值的行为，对于类管理的对象，每个对象都应该拥有一份自己的拷贝。")]),t._v(" "),s("p",[s("strong",[t._v("类值拷贝赋值运算符")]),t._v(":通常组合了析构函数和构造函数的操作。")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("HasPtr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" HasPtr"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" HasPtr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" newp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("rhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" ps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tps "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\ti "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[t._v("（2）行为像指针的类")]),t._v(" "),s("p",[t._v("如果需要可直接管理资源，可以使用引用计数。")]),t._v(" "),s("h3",{attrs:{id:"_13-3-交换操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-3-交换操作"}},[t._v("#")]),t._v(" 13.3 交换操作")]),t._v(" "),s("p",[t._v("swap")]),t._v(" "),s("h3",{attrs:{id:"_13-4-拷贝控制示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-4-拷贝控制示例"}},[t._v("#")]),t._v(" 13.4 拷贝控制示例")]),t._v(" "),s("p",[t._v("P460")]),t._v(" "),s("h3",{attrs:{id:"_13-5-动态内存管理类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-5-动态内存管理类"}},[t._v("#")]),t._v(" 13.5 动态内存管理类")]),t._v(" "),s("p",[t._v("P464")]),t._v(" "),s("h3",{attrs:{id:"_13-6-对象移动"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-6-对象移动"}},[t._v("#")]),t._v(" 13.6 对象移动")]),t._v(" "),s("p",[t._v("与任何赋值运算符一样，移动赋值运算符必须销毁左侧运算对象的旧状态。")]),t._v(" "),s("p",[t._v("（1）右值引用")]),t._v(" "),s("p",[t._v("可通过move函数开获得绑定到左值上的右值引用。")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" rr3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("move")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rr1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("（2）移动构造函数和移动赋值运算符")]),t._v(" "),s("p",[t._v("移动构造函数的第一个参数是该类类型的一个右值引用。")]),t._v(" "),s("p",[s("strong",[t._v("移动赋值运算符")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("StrVec "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("StrVec"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("StrVec "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("rhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("noexcept")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[s("strong",[t._v("合成的移动操作")]),t._v("：")]),t._v(" "),s("p",[t._v("若一个类定义了自己的拷贝构造函数、拷贝赋值运算符或者析构函数，编译器就不会为它合成移动构造函数和移动赋值运算符。")]),t._v(" "),s("p",[t._v("如果一个类没有移动操作，类会使用对应的拷贝操作来代替移动操作。")]),t._v(" "),s("p",[s("strong",[t._v("移动迭代器")]),t._v(":")]),t._v(" "),s("p",[t._v("移动迭代器的解引用运算符生成一个右值引用。")]),t._v(" "),s("p",[t._v("（3）右值引用和成员函数")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("区分移动和拷贝的重载函数通常有一个版本接受一个const T&，而另一个版本接受一个T&&。")])]),t._v(" "),s("p",[s("strong",[t._v("右值和左值引用成员函数")]),t._v(":")]),t._v(" "),s("p",[t._v("指出this的左值/右值属性的方式与定义const成员函数相同，在参数列表后放置一个引用限定符。P483")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("如果一个成员函数有引用限定符，则具有相同参数列表的所有版本都必须有引用限定符。P485")])]),t._v(" "),s("h3",{attrs:{id:"术语-5"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#术语-5"}},[t._v("#")]),t._v(" 术语")]),t._v(" "),s("p",[s("strong",[t._v("引用限定符")]),t._v("：被&限定的函数只能用于坐值；被&&限定的函数只能用于右值。")]),t._v(" "),s("h2",{attrs:{id:"第十四章-重载运算与类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第十四章-重载运算与类型转换"}},[t._v("#")]),t._v(" 第十四章 重载运算与类型转换")]),t._v(" "),s("p",[t._v("P490-P523")]),t._v(" "),s("p",[t._v("通过运算符重载可重新定义该运算符的含义。")]),t._v(" "),s("h3",{attrs:{id:"_14-1-基本概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-1-基本概念"}},[t._v("#")]),t._v(" 14.1 基本概念")]),t._v(" "),s("p",[s("strong",[t._v("定义")]),t._v("：重载运算符是具有特殊名字的函数。名字由operator和符号组成。重载运算符包含返回类型、参数列表和函数体。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("当一个重载的运算符是成员函数时，this绑定到左侧运算对象。成员运算符函数的显式参数数量比运算对象的数量少一个。")]),t._v(" "),s("p",[t._v("对于一个运算符来说，它或者是类的成员，或者至少含有一个类类型的参数。")]),t._v(" "),s("p",[t._v("我们只能重载已有的运算符。")])]),t._v(" "),s("p",[s("strong",[t._v("直接调用一个重载的运算符函数")])]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("data1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" data2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 以上2个调用等价")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h3",{attrs:{id:"_14-2-输入和输出运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-2-输入和输出运算符"}},[t._v("#")]),t._v(" 14.2 输入和输出运算符")]),t._v(" "),s("p",[t._v("（1）重载输出运算符<<")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("ostream "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ostream "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("os"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Sales_data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tos "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isbn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unites_sold "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("revenue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("avg_price")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" os"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("（2）重载输入运算符>>")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("istream "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("istream "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("is"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Sales_data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" price"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tis "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bookNo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("units_sold "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" price"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("is"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\titem"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("revenue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" items"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("units_sold "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" price"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n\t\titem "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sales_data")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" is"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("h3",{attrs:{id:"_14-3-算术和关系运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-3-算术和关系运算符"}},[t._v("#")]),t._v(" 14.3 算术和关系运算符")]),t._v(" "),s("p",[t._v("（1）相等运算符")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Sales_data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("lhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Sales_data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" lhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isbn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" rhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isbn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n\t\t\tlhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unites_sold "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" rhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("units_sold "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n\t\t\tlhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("revenue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" rhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("revenue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("（2）关系运算符")]),t._v(" "),s("p",[t._v("operator<")]),t._v(" "),s("h3",{attrs:{id:"_14-4-赋值运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-4-赋值运算符"}},[t._v("#")]),t._v(" 14.4 赋值运算符")]),t._v(" "),s("p",[t._v("operator=")]),t._v(" "),s("p",[t._v("operator+=")]),t._v(" "),s("h3",{attrs:{id:"_14-5-下标运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-5-下标运算符"}},[t._v("#")]),t._v(" 14.5 下标运算符")]),t._v(" "),s("p",[t._v("operator[]")]),t._v(" "),s("p",[t._v("下标运算符必须是成员函数。")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StrVec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\tstd"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("size_t n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" elements"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("size_t n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" elements"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\tstd"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("string "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("elements"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("h3",{attrs:{id:"_14-6-递减和递增运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-6-递减和递增运算符"}},[t._v("#")]),t._v(" 14.6 递减和递增运算符")]),t._v(" "),s("p",[t._v("递增运算符（++）")]),t._v(" "),s("p",[t._v("递减运算符（--）")]),t._v(" "),s("p",[s("strong",[t._v("定义前置递增/递减运算符")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class StrBlobPtr{\npublic:\n\tStrBlobPtr& operator++();  // 前置运算符\n\tStrBlobPtr& operator--();\n}\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[s("strong",[t._v("区分前置和后置运算符")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StrBlobPtr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\tStrBlobPtr "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 后置运算符")]),t._v("\n\tStrBlobPtr "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("h3",{attrs:{id:"_14-7-成员访问运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-7-成员访问运算符"}},[t._v("#")]),t._v(" 14.7 成员访问运算符")]),t._v(" "),s("p",[t._v("operator*")]),t._v(" "),s("p",[t._v("operator->")]),t._v(" "),s("h3",{attrs:{id:"_14-8-函数调用运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-8-函数调用运算符"}},[t._v("#")]),t._v(" 14.8 函数调用运算符")]),t._v(" "),s("p",[t._v("如果类重载了函数调用运算符，则我们可以像使用函数一样使用该类的对象。")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("absInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nabsInt absObj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ui "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("absObj")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[t._v("如果定义了调用运算符，则该类的对象称为函数对象。")]),t._v(" "),s("h3",{attrs:{id:"_14-9-重载、类型转换与运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-9-重载、类型转换与运算符"}},[t._v("#")]),t._v(" 14.9 重载、类型转换与运算符")]),t._v(" "),s("p",[t._v("（1）类型转换运算符")]),t._v(" "),s("p",[t._v("类型转换运算符是类的一种特殊成员函数，将一个类类型的值转换成其他类型。形式：")]),t._v(" "),s("p",[t._v("operator type() const;")]),t._v(" "),s("p",[t._v("（2）避免有二义性的类型转换")]),t._v(" "),s("p",[t._v("（3）函数匹配与重载运算符")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[t._v("如果对同一个类既提供了转换目标是算术类型的类型转换，也提供了重载的运算符，将会遇到重载运算符与内置运算符的二义性问题。")])]),t._v(" "),s("h3",{attrs:{id:"术语-6"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#术语-6"}},[t._v("#")]),t._v(" 术语")]),t._v(" "),s("p",[s("strong",[t._v("类类型转换")]),t._v(":由构造函数定义的从其他类型到类类型的转换以及由类型转换运算符定义的从类类型到其他类型的转换。")]),t._v(" "),s("h2",{attrs:{id:"第十五章-面向对象程序设计"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第十五章-面向对象程序设计"}},[t._v("#")]),t._v(" 第十五章 面向对象程序设计")]),t._v(" "),s("p",[t._v("P526-P575")]),t._v(" "),s("h3",{attrs:{id:"_15-1-oop-概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_15-1-oop-概述"}},[t._v("#")]),t._v(" 15.1 OOP:概述")]),t._v(" "),s("p",[t._v("（1）"),s("strong",[t._v("面对对象程序设计（object-oriented programming）的核心思想")]),t._v("：")]),t._v(" "),s("p",[t._v("数据抽象、继承和动态绑定。")]),t._v(" "),s("p",[t._v("（2）"),s("strong",[t._v("继承")]),t._v("：")]),t._v(" "),s("blockquote",[s("p",[t._v("继承是一种类联系在一起的一种层次关系。这种关系中，根部是"),s("em",[t._v("基类")]),t._v("，从基类继承而来的类成为"),s("em",[t._v("派生类")]),t._v("。")])]),t._v(" "),s("p",[t._v("基类负责定义在层次关系中所有类共同拥有的成员，而每个派生类定义各自特有的成员。")]),t._v(" "),s("p",[t._v("虚函数：virtual function。基类希望派生类各自定义自身版本的函数。")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Quote")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t\tstd"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("string "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isbn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("net_price")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("size_t n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("（3）"),s("strong",[t._v("动态绑定")]),t._v("：")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("在C++语言中，当我们使用基类的引用（或者指针）调用一个虚函数时将发生动态绑定（也称"),s("em",[t._v("运行时绑定")]),t._v("）。P527")])]),t._v(" "),s("h3",{attrs:{id:"_15-2-定义基类和派生类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_15-2-定义基类和派生类"}},[t._v("#")]),t._v(" 15.2 定义基类和派生类")]),t._v(" "),s("p",[t._v("（1）定义基类")]),t._v(" "),s("p",[t._v("虚函数：基类希望派生类进行覆盖的函数。")]),t._v(" "),s("blockquote",[s("p",[t._v("基类将该函数定义为虚函数（virtual）。")])]),t._v(" "),s("blockquote",[s("p",[t._v("基类通过在其成员函数的声明语句之前加上关键词virtual使得该函数执行动态绑定。")])]),t._v(" "),s("blockquote",[s("p",[t._v("关键词virtual只能出现在类内部的声明语句之前而不能用于类外部的函数定义。")])]),t._v(" "),s("blockquote",[s("p",[t._v("如果基类把一个函数声明成虚函数，则该函数在派生类中隐式的也是虚函数。")])]),t._v(" "),s("p",[t._v("（2）定义派生类")]),t._v(" "),s("p",[t._v("派生类必须通过派生类列表明确指出它是从哪个基类继承而来的。")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Bulk_quote")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token base-clause"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Quote")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("对于派生类中的虚函数的处理：")]),t._v(" "),s("p",[t._v("若派生类未覆盖基类中的虚函数，则该虚函数的行为类似其他普通成员。")]),t._v(" "),s("p",[t._v("C++允许派生类显式注明覆盖了基类的虚函数，可通过添加override关键字。")]),t._v(" "),s("p",[s("strong",[t._v("派生类对象")]),t._v(":")]),t._v(" "),s("p",[t._v("一个派生类对象包含多个部分：自己定义的成员的子对象，以及基类的子对象。")]),t._v(" "),s("p",[s("strong",[t._v("派生到基类的类型转换")]),t._v("：")]),t._v(" "),s("p",[t._v("由于派生类对象中含有与其基类对象的组成部分，因此可以进行隐式的执行派生类到基类的转换。")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("Quote item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 基类")]),t._v("\nBulk_quote bulk"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 派生类")]),t._v("\nQuote "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// p指向Quote对象")]),t._v("\np "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("bulk"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// p指向bulk的Quote部分")]),t._v("\nQuote "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("r "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" bulk"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// r绑定到bulk的Quote部分。")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[s("strong",[t._v("派生类构造函数")]),t._v("：")]),t._v(" "),s("p",[t._v("每个类控制自己的成员的初始化过程。派生类首先初始化基类的部分，然后按照声明的顺序依次初始化派生类的成员。")]),t._v(" "),s("p",[s("strong",[t._v("派生类使用基类的成员")]),t._v("：")]),t._v(" "),s("p",[t._v("派生类可以访问基类的公有成员和受保护成员。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("派生类对象不能直接初始化基类的成员。派生类应该遵循基类的借口，通过调用基类的构造函数来初始化从基类继承来的成员。")])]),t._v(" "),s("p",[s("strong",[t._v("被用作基类的类")]),t._v(":")]),t._v(" "),s("p",[t._v("若使用某个类作为基类，则该类必须已被定义而非仅仅声明。")]),t._v(" "),s("p",[t._v("派生类包含它的直接基类的子对象以及每个间接基类的子对象。")]),t._v(" "),s("p",[s("strong",[t._v("防止继承发生")]),t._v(":")]),t._v(" "),s("p",[t._v("在类名后面跟着一个关键字final。")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NoDerived")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NoDerived不能作为基类")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("（3）类型转换与继承")]),t._v(" "),s("p",[t._v("我们可以将基类的指针或引用绑定到派生类对象上。")]),t._v(" "),s("p",[s("strong",[t._v("静态类型与动态类型")]),t._v(":")]),t._v(" "),s("p",[t._v("静态类型：在编译时已知，是变量声明时的类型或表达式生成的类型。")]),t._v(" "),s("p",[t._v("动态类型：运行时才可知，是变量或表达式表示的内存中的对象的类型。")]),t._v(" "),s("p",[t._v("如果表达式既不是引用也不是指针，则动态类型与静态类型永远一致。")]),t._v(" "),s("p",[s("strong",[t._v("不存在基类向派生类隐式类型转换")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("Quote base"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nBulk_quote "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("bulkP "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("base"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 错误!")]),t._v("\nBulk_quote "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("bulkRef "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" base"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 错误!")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[t._v("当我么用一个派生类对象为一个基类对象初始化或赋值时，只有该派生类对象中的基类部分会被拷贝、移动或赋值，它的派生类部分会被忽略掉。")])]),t._v(" "),s("h3",{attrs:{id:"_15-3-虚函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_15-3-虚函数"}},[t._v("#")]),t._v(" 15.3 虚函数")]),t._v(" "),s("p",[s("strong",[t._v("C++的多态性")]),t._v("：使用这些类型的多种形式，而无须在意它们的差异。")]),t._v(" "),s("p",[s("strong",[t._v("派生类中的虚函数")]),t._v(":")]),t._v(" "),s("p",[t._v("一个派生类如果覆盖了某个继承而来的虚函数，则它的形参类型必须与被它覆盖的基类函数完全一致。")]),t._v(" "),s("p",[s("strong",[t._v("final和override说明符")]),t._v(":")]),t._v(" "),s("p",[t._v("如果用override标记了某个函数，但是该函数并没有覆盖已存在的虚函数，此时编译器将报错。")]),t._v(" "),s("p",[t._v("如果用final标记了某个函数， 则之后任何尝试覆盖该函数的操作都将错误。")]),t._v(" "),s("p",[s("strong",[t._v("虚函数与默认实参")]),t._v("：")]),t._v(" "),s("p",[t._v("如果虚函数某次被调用使用了默认实参，则该实参值由本次调用的静态类型决定。")]),t._v(" "),s("h3",{attrs:{id:"_15-4-抽象基类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_15-4-抽象基类"}},[t._v("#")]),t._v(" 15.4 抽象基类")]),t._v(" "),s("p",[s("strong",[t._v("纯虚函数")]),t._v(":")]),t._v(" "),s("p",[t._v("书写=0可以将一个虚函数说明为纯虚函数（pure virtual），纯虚函数无须定义。")]),t._v(" "),s("p",[t._v("不能在类的内部为一个=0的函数提供函数体。")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Disc_quote")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token base-clause"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Quote")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("net_price")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("size_t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[s("strong",[t._v("抽象基类")]),t._v("：")]),t._v(" "),s("p",[t._v("含有纯虚函数的类是抽象基类。")]),t._v(" "),s("p",[t._v("不能创建抽象基类的对象。")]),t._v(" "),s("h3",{attrs:{id:"_15-5-访问控制与继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_15-5-访问控制与继承"}},[t._v("#")]),t._v(" 15.5 访问控制与继承")]),t._v(" "),s("p",[s("strong",[t._v("受保护的成员")]),t._v(":")]),t._v(" "),s("p",[t._v("派生类的成员和友元只能访问派生类对象中的基类部分的受保护成员；对于普通的基类对象中的成员不具有特殊的访问权限。P543")]),t._v(" "),s("p",[s("strong",[t._v("公有、私有和受保护继承")]),t._v("：")]),t._v(" "),s("p",[t._v("派生访问说明符对于派生类的成员（及友元）能否访问其直接基类的成员无影响；")]),t._v(" "),s("p",[t._v("对基类成员的访问权限只与基类中的访问说明符有关。")]),t._v(" "),s("p",[t._v("派生访问说明符的目的是控制派生类用户对于基类成员的访问权限。")]),t._v(" "),s("p",[s("strong",[t._v("改变个别成员的可访问性")]),t._v(":")]),t._v(" "),s("p",[t._v("通过在类的内部使用using声明语句，我们可以将该类的直接或间接基类中的任何可访问成员标记出来。")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Derived")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token base-clause"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Base")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" Base"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("派生类只能为它可访问的名字提供using声明。")])]),t._v(" "),s("p",[s("strong",[t._v("默认的继承保护级别")]),t._v(":")]),t._v(" "),s("p",[t._v("使用class关键字定义的派生类是私有继承的；")]),t._v(" "),s("p",[t._v("使用struct关键字定义的派生类是共有继承的。")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Base")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("D1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token base-clause"}},[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Base")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 默认public继承")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("D2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token base-clause"}},[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Base")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 默认private继承")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h3",{attrs:{id:"_15-6-继承中的类作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_15-6-继承中的类作用域"}},[t._v("#")]),t._v(" 15.6 继承中的类作用域")]),t._v(" "),s("p",[s("strong",[t._v("在编译时进行名字查找")]),t._v(":")]),t._v(" "),s("p",[t._v("一个对象、引用或指针的静态类型决定了该对象的哪些成员是可见的。")]),t._v(" "),s("p",[s("strong",[t._v("名字冲突与继承")]),t._v(":")]),t._v(" "),s("p",[t._v("派生类的成员将隐藏同名的基类成员。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("出了覆盖继承而来的虚函数外，派生类最好不雅重用其他定义在基类中的名字。")])]),t._v(" "),s("p",[t._v("如果派生类的成员函数与基类的某个成员函数同名，则派生类将在其作用域内隐藏掉该基类成员函数。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("非虚函数不会发生动态绑定。")])]),t._v(" "),s("h3",{attrs:{id:"_15-7-构造函数与拷贝控制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_15-7-构造函数与拷贝控制"}},[t._v("#")]),t._v(" 15.7 构造函数与拷贝控制")]),t._v(" "),s("p",[t._v("（1）虚析构函数")]),t._v(" "),s("p",[t._v("在基类中将析构函数定义成虚函数以确保执行正确的析构函数版本。")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("Quote "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("itemP "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" Quote"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" itemP"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用Quote的析构函数")]),t._v("\nitemP "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" Bulk_quote"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" itemP"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用Bulk_quote的析构函数")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("虚析构函数会阻止合成移动操作。")]),t._v(" "),s("p",[t._v("（2）合成拷贝控制与继承")]),t._v(" "),s("p",[t._v("基类缺少移动操作会阻止派生类拥有自己的合成移动操作，所以当确实要执行移动操作的时候就要首先在基类中进行显式定义。P554")]),t._v(" "),s("p",[t._v("（3）派生类的拷贝控制成员")]),t._v(" "),s("p",[s("strong",[t._v("派生类的拷贝或移动构造函数")]),t._v(":")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("默认情况下，基类默认构造函数初始化派生类对象的基类部分。如果我们想拷贝（或移动）基类部分，则必须在派生类的构造函数初始值列表中显式的使用基类的拷贝（或移动）构造函数。")])]),t._v(" "),s("p",[s("strong",[t._v("派生类的赋值运算符")]),t._v(":")]),t._v(" "),s("p",[t._v("派生类的赋值运算符必须显式的为其基类部分赋值。")]),t._v(" "),s("p",[s("strong",[t._v("派生类的析构函数")]),t._v(":")]),t._v(" "),s("p",[t._v("派生类函数只负责销毁由派生类自己分配的资源。")]),t._v(" "),s("h3",{attrs:{id:"_15-8-容器与继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_15-8-容器与继承"}},[t._v("#")]),t._v(" 15.8 容器与继承")]),t._v(" "),s("p",[t._v("当使用容器存放继承体系中的对象时，必须采用间接存储的方式。因为不允许在容器中保存不同类型的元素。")]),t._v(" "),s("h3",{attrs:{id:"术语-7"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#术语-7"}},[t._v("#")]),t._v(" 术语")]),t._v(" "),s("p",[t._v("覆盖：override，派生类中定义的虚函数如果与基类中定义的同名虚函数与相同的形参列表，则派生类版本将覆盖基类的版本。")]),t._v(" "),s("p",[t._v("多态：程序能够通引用或指针的动态类型获取类型特定行为的能力。")]),t._v(" "),s("h2",{attrs:{id:"第十六章-模板与泛型编程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第十六章-模板与泛型编程"}},[t._v("#")]),t._v(" 第十六章 模板与泛型编程")]),t._v(" "),s("p",[t._v("P578-P630")]),t._v(" "),s("p",[t._v("（1）控制实例化")]),t._v(" "),s("p",[t._v("当编译器遇到extern模板声明时，它不会在本文件中生成实例化代码。将一个实例化声明为extern就表示承诺在程序其他位置有该实例化的一个非extern声明（定义）。对于一个给定的实例化版本，可能有多个extern声明，但必须只有一个定义。")]),t._v(" "),s("p",[t._v("（2）\n模板是标准库的基础。")]),t._v(" "),s("p",[t._v("生成特定类或者函数的过程称为实例化。")]),t._v(" "),s("p",[t._v("（3）术语")]),t._v(" "),s("p",[t._v("类模板： 模板定义，可从它实例化出特定的类。类模板的定义以关键词template开始，后面跟尖括号对<和>，其内为一个用逗号分隔的一个或多个模板参数的列表，随后是类的定义。")]),t._v(" "),s("p",[t._v("函数模板： 模板定义，可从它实例化出特定函数。函数模板的定义以关键词template开始，后跟尖括号<和>，其内以一个用逗号分隔的一个或多个模板参数的列表，随后是函数的定义。")])])}),[],!1,null,null,null);s.default=e.exports}}]);